{
    "sourceFile": "lib/modules/system_diagram_view_module/providers/diagram_experiment_planner_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1726318117100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1726318117100,
            "name": "Commit-0",
            "content": "// diagram_experiment_planner_provider.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:flutter/foundation.dart';\r\nimport '../models/data_point.dart';\r\nimport '../services/data_simulation_service.dart';\r\n\r\nenum ComponentStatus { normal, warning, error }\r\n\r\nclass SystemComponent {\r\n  final String name;\r\n  final String description;\r\n  ComponentStatus status;\r\n  Map<String, double> currentValues;\r\n  Map<String, double> setValues;\r\n  List<String> errorMessages;\r\n  Map<String, List<DataPoint>> parameterHistory;\r\n  bool isActivated; // Indicates if the component is activated by the user\r\n\r\n  SystemComponent({\r\n    required this.name,\r\n    required this.description,\r\n    this.status = ComponentStatus.normal,\r\n    required this.currentValues,\r\n    required this.setValues,\r\n    this.errorMessages = const [],\r\n    this.isActivated = false, // Default to not activated\r\n  }) : parameterHistory = {\r\n    for (var key in currentValues.keys) key: [],\r\n  };\r\n}\r\n\r\nclass SystemLogEntry {\r\n  final DateTime timestamp;\r\n  final String message;\r\n  final ComponentStatus severity;\r\n\r\n  SystemLogEntry({\r\n    required this.timestamp,\r\n    required this.message,\r\n    required this.severity,\r\n  });\r\n}\r\n\r\nclass SystemStateProvider with ChangeNotifier {\r\n  // Map to store all system components by their names\r\n  final Map<String, SystemComponent> _components = {};\r\n\r\n  // System status\r\n  bool isSystemRunning = false;\r\n  bool isSystemInIdleState = false;\r\n\r\n  // System log\r\n  final List<SystemLogEntry> systemLog = [];\r\n\r\n  // Data Simulation Service\r\n  late final DataSimulationService dataSimulationService;\r\n\r\n  // Constructor\r\n  SystemStateProvider() {\r\n    _initializeComponents();\r\n    dataSimulationService = DataSimulationService(diagramSystemStateProvider: this);\r\n  }\r\n\r\n  // Public getter to access components\r\n  Map<String, SystemComponent> get components => _components;\r\n\r\n  // Initialize all components and populate the _components map\r\n  void _initializeComponents() {\r\n    // Define all system components\r\n    final componentsList = [\r\n      SystemComponent(\r\n        name: 'Nitrogen Generator',\r\n        description: 'Provides inert gas for purging and as a carrier gas',\r\n        currentValues: {'flow_rate': 0.0, 'purity': 99.9},\r\n        setValues: {'flow_rate': 0.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'MFC',\r\n        description: 'Mass Flow Controller for precise gas flow regulation',\r\n        currentValues: {'flow_rate': 0.0, 'pressure': 1.0, 'percent_correction': 0.0},\r\n        setValues: {'flow_rate': 0.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Backline Heater',\r\n        description: 'Heats precursor delivery lines to prevent condensation',\r\n        currentValues: {'temperature': 25.0},\r\n        setValues: {'temperature': 25.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Frontline Heater',\r\n        description: 'Heats gas lines near the reaction chamber',\r\n        currentValues: {'temperature': 25.0},\r\n        setValues: {'temperature': 25.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Precursor Heater 1',\r\n        description: 'Heats precursor container to maintain vapor pressure',\r\n        currentValues: {'temperature': 25.0, 'fill_level': 100.0},\r\n        setValues: {'temperature': 25.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Precursor Heater 2',\r\n        description: 'Heats precursor container to maintain vapor pressure',\r\n        currentValues: {'temperature': 25.0, 'fill_level': 100.0},\r\n        setValues: {'temperature': 25.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Precursor Heater 3',\r\n        description: 'Heats precursor container to maintain vapor pressure',\r\n        currentValues: {'temperature': 25.0, 'fill_level': 100.0},\r\n        setValues: {'temperature': 25.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Reaction Chamber',\r\n        description: 'Where the ALD reactions occur on the substrate',\r\n        currentValues: {'temperature': 25.0, 'pressure': 1.0},\r\n        setValues: {'temperature': 25.0, 'pressure': 1.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Valve 1',\r\n        description: 'Controls the flow of precursor 1 and purge gas',\r\n        currentValues: {'status': 0.0}, // 0.0 for off, 1.0 for on\r\n        setValues: {'status': 0.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Valve 2',\r\n        description: 'Controls the flow of precursor 2 and purge gas',\r\n        currentValues: {'status': 0.0},\r\n        setValues: {'status': 0.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Valve 3',\r\n        description: 'Controls the flow of precursor 3 and purge gas',\r\n        currentValues: {'status': 0.0},\r\n        setValues: {'status': 0.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Pressure Control System',\r\n        description: 'Maintains optimal pressure in the reaction chamber',\r\n        currentValues: {'pressure': 1.0},\r\n        setValues: {'pressure': 1.0},\r\n      ),\r\n      SystemComponent(\r\n        name: 'Vacuum Pump',\r\n        description: 'Evacuates the chamber between precursor pulses',\r\n        currentValues: {'power': 100.0}, // in Watts\r\n        setValues: {'power': 100.0},\r\n      ),\r\n    ];\r\n\r\n    // Populate the _components map\r\n    for (var component in componentsList) {\r\n      _components[component.name] = component;\r\n    }\r\n\r\n    _addLogEntry('System initialized', ComponentStatus.normal);\r\n  }\r\n\r\n  // Method to activate a component\r\n  void activateComponent(String name) {\r\n    final component = getComponentByName(name);\r\n    component.isActivated = true;\r\n    _addLogEntry('${component.name} activated', ComponentStatus.normal);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to deactivate a component\r\n  void deactivateComponent(String name) {\r\n    final component = getComponentByName(name);\r\n    component.isActivated = false;\r\n    _addLogEntry('${component.name} deactivated', ComponentStatus.normal);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to set a component's set value\r\n  void setComponentSetValue(String name, String parameter, double value) {\r\n    final component = getComponentByName(name);\r\n    if (component.setValues.containsKey(parameter)) {\r\n      component.setValues[parameter] = value;\r\n      _addLogEntry('${component.name} set ${parameter} to ${value}', ComponentStatus.normal);\r\n      notifyListeners();\r\n    } else {\r\n      _addLogEntry('Attempted to set unknown parameter \"$parameter\" for ${component.name}', ComponentStatus.warning);\r\n    }\r\n  }\r\n\r\n  // Check if the system can start\r\n  bool canStartSystem() {\r\n    // List of components that must be activated and configured\r\n    List<SystemComponent> requiredComponents = [\r\n      _components['Nitrogen Generator']!,\r\n      _components['MFC']!,\r\n      _components['Backline Heater']!,\r\n      _components['Frontline Heater']!,\r\n      _components['Precursor Heater 1']!,\r\n      _components['Precursor Heater 2']!,\r\n      _components['Reaction Chamber']!,\r\n      _components['Pressure Control System']!,\r\n      _components['Vacuum Pump']!,\r\n      // Add Precursor Heater 3 if applicable\r\n    ];\r\n\r\n    for (var component in requiredComponents) {\r\n      if (!component.isActivated) {\r\n        _addLogEntry('${component.name} is not activated', ComponentStatus.warning);\r\n        return false;\r\n      }\r\n      // Check if all required set values are configured\r\n      for (var key in component.setValues.keys) {\r\n        if (component.setValues[key] == null) {\r\n          _addLogEntry('${component.name} set value for ${key} is not configured', ComponentStatus.warning);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Method to start the system\r\n  void startSystem() {\r\n    if (!canStartSystem()) {\r\n      _addLogEntry('System cannot start. Please activate and configure all required components.', ComponentStatus.error);\r\n      return;\r\n    }\r\n    isSystemRunning = true;\r\n    _addLogEntry('System started', ComponentStatus.normal);\r\n    dataSimulationService.startSimulation();\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to pause the system\r\n  void pauseSystem() {\r\n    isSystemRunning = false;\r\n    _addLogEntry('System paused', ComponentStatus.normal);\r\n    dataSimulationService.stopSimulation();\r\n    notifyListeners();\r\n  }\r\n\r\n  // Method to run diagnostics on a component\r\n  void runDiagnostic(String componentName) {\r\n    final component = getComponentByName(componentName);\r\n    _addLogEntry('Running diagnostic for ${component.name}', ComponentStatus.normal);\r\n    // Simulate diagnostic result\r\n    Future.delayed(Duration(seconds: 2), () {\r\n      _addLogEntry('${component.name} diagnostic completed: All systems nominal', ComponentStatus.normal);\r\n      notifyListeners();\r\n    });\r\n  }\r\n\r\n  // Method to add a log entry\r\n  void _addLogEntry(String message, ComponentStatus severity) {\r\n    systemLog.add(SystemLogEntry(\r\n      timestamp: DateTime.now(),\r\n      message: message,\r\n      severity: severity,\r\n    ));\r\n    // Keep only the last 100 log entries\r\n    if (systemLog.length > 100) {\r\n      systemLog.removeAt(0);\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  // Getter to retrieve recent logs\r\n  List<SystemLogEntry> getRecentLogs({int count = 10}) {\r\n    return systemLog.reversed.take(count).toList();\r\n  }\r\n\r\n  // Method to retrieve a component by name\r\n  SystemComponent getComponentByName(String name) {\r\n    if (_components.containsKey(name)) {\r\n      return _components[name]!;\r\n    }\r\n    throw ArgumentError('Unknown component name: $name');\r\n  }\r\n}\r\n"
        }
    ]
}