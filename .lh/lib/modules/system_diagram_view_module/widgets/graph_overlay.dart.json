{
    "sourceFile": "lib/modules/system_diagram_view_module/widgets/graph_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726318117097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726318284909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:fl_chart/fl_chart.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n+import '../../../core/providers/experiment_planner_provider.dart';\r\n import '../providers/diagram_experiment_planner_provider.dart';\r\n import '../models/data_point.dart';\r\n \r\n class GraphOverlay extends StatefulWidget {\r\n"
                }
            ],
            "date": 1726318117097,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../providers/diagram_experiment_planner_provider.dart';\r\nimport '../models/data_point.dart';\r\n\r\nclass GraphOverlay extends StatefulWidget {\r\n  @override\r\n  _GraphOverlayState createState() => _GraphOverlayState();\r\n}\r\n\r\nclass _GraphOverlayState extends State<GraphOverlay> {\r\n  // Default component positions\r\n  final Map<String, Offset> _defaultComponentRelativePositions = {\r\n    'Nitrogen Generator': Offset(0.05, 0.80),\r\n    'MFC': Offset(0.20, 0.70),\r\n    'Backline Heater': Offset(0.35, 0.60),\r\n    'Frontline Heater': Offset(0.50, 0.50),\r\n    'Precursor Heater 1': Offset(0.65, 0.40),\r\n    'Precursor Heater 2': Offset(0.80, 0.30),\r\n    'Reaction Chamber': Offset(0.50, 0.20),\r\n    'Pressure Control System': Offset(0.90, 0.85),\r\n    'Vacuum Pump': Offset(0.75, 0.75),\r\n  };\r\n\r\n  // Current component positions (loaded from preferences or default)\r\n  late Map<String, Offset> _currentPositions;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _currentPositions = Map.from(_defaultComponentRelativePositions);\r\n    _loadComponentPositions(); // Load saved positions from SharedPreferences\r\n  }\r\n\r\n  // Load positions from SharedPreferences\r\n  Future<void> _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final savedPositions = prefs.getString('component_graph_positions');\r\n    if (savedPositions != null) {\r\n      final positionsMap = jsonDecode(savedPositions) as Map<String, dynamic>;\r\n      setState(() {\r\n        _currentPositions = positionsMap.map((key, value) {\r\n          final offsetList = (value as List).cast<double>();\r\n          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Save positions to SharedPreferences\r\n  Future<void> _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _currentPositions.map((key, value) => MapEntry(key, [value.dx, value.dy]));\r\n    await prefs.setString('component_graph_positions', jsonEncode(positionsMap));\r\n    print(\"Component positions saved: $_currentPositions\");\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return LayoutBuilder(\r\n      builder: (context, constraints) {\r\n        final double imageWidth = constraints.maxWidth;\r\n        final double imageHeight = constraints.maxHeight;\r\n\r\n        return Consumer<SystemStateProvider>(\r\n          builder: (context, systemStateProvider, child) {\r\n            return Stack(\r\n              children: _currentPositions.entries.map((entry) {\r\n                final componentName = entry.key;\r\n                final relativePosition = entry.value;\r\n\r\n                // Calculate absolute position based on relative percentages\r\n                final double left = relativePosition.dx * imageWidth;\r\n                final double top = relativePosition.dy * imageHeight;\r\n\r\n                // Get the component by name from the provider\r\n                final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n\r\n                // Determine which parameter to plot\r\n                final parameterToPlot = _getParameterToPlot(component);\r\n\r\n                if (parameterToPlot == null) {\r\n                  return SizedBox.shrink();\r\n                }\r\n\r\n                return Positioned(\r\n                  left: left - 50, // Adjust to center the graph\r\n                  top: top - 40,\r\n                  child: GestureDetector(\r\n                    onPanUpdate: (details) {\r\n                      setState(() {\r\n                        // Update position while dragging\r\n                        _currentPositions[componentName] = Offset(\r\n                          (left + details.delta.dx) / imageWidth, // Update relative X\r\n                          (top + details.delta.dy) / imageHeight, // Update relative Y\r\n                        );\r\n                      });\r\n                    },\r\n                    onPanEnd: (_) {\r\n                      // Save positions when dragging ends\r\n                      _saveComponentPositions();\r\n                    },\r\n                    child: Container(\r\n                      width: 100,\r\n                      height: 80,\r\n                      decoration: BoxDecoration(\r\n                        color: Colors.black54,\r\n                        borderRadius: BorderRadius.circular(8),\r\n                      ),\r\n                      padding: EdgeInsets.all(4),\r\n                      child: Column(\r\n                        children: [\r\n                          Text(\r\n                            '$componentName\\n($parameterToPlot)',\r\n                            style: TextStyle(color: Colors.white, fontSize: 10),\r\n                            textAlign: TextAlign.center,\r\n                          ),\r\n                          SizedBox(height: 4),\r\n                          Expanded(\r\n                            child: _buildGraph(component, parameterToPlot),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                );\r\n              }).toList(),\r\n            );\r\n          },\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  String? _getParameterToPlot(SystemComponent component) {\r\n    switch (component.name) {\r\n      case 'Nitrogen Generator':\r\n        return 'flow_rate';\r\n      case 'MFC':\r\n        return 'flow_rate';\r\n      case 'Backline Heater':\r\n      case 'Frontline Heater':\r\n      case 'Precursor Heater 1':\r\n      case 'Precursor Heater 2':\r\n      case 'Precursor Heater 3':\r\n        return 'temperature';\r\n      case 'Reaction Chamber':\r\n      case 'Pressure Control System':\r\n        return 'pressure';\r\n      case 'Vacuum Pump':\r\n        return 'power'; // Ensure this matches your data\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  Widget _buildGraph(SystemComponent component, String parameter) {\r\n    final dataPoints = component.parameterHistory[parameter];\r\n\r\n    if (dataPoints == null || dataPoints.isEmpty) {\r\n      return Container(\r\n        color: Colors.black26,\r\n        child: Center(\r\n          child: Text(\r\n            'No data',\r\n            style: TextStyle(color: Colors.white, fontSize: 8),\r\n          ),\r\n        ),\r\n      );\r\n    }\r\n\r\n    // Convert data points to spots\r\n    final firstTimestamp = dataPoints.first.timestamp.millisecondsSinceEpoch.toDouble();\r\n    List<FlSpot> spots = dataPoints.map((dp) {\r\n      double x = (dp.timestamp.millisecondsSinceEpoch.toDouble() - firstTimestamp) / 1000; // in seconds\r\n      double y = dp.value;\r\n      return FlSpot(x, y);\r\n    }).toList();\r\n\r\n    // Determine Y-axis range\r\n    double minY = dataPoints.map((dp) => dp.value).reduce((a, b) => a < b ? a : b) - 1;\r\n    double maxY = dataPoints.map((dp) => dp.value).reduce((a, b) => a > b ? a : b) + 1;\r\n\r\n    return LineChart(\r\n      LineChartData(\r\n        minX: 0,\r\n        maxX: spots.isNotEmpty ? spots.last.x : 6,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        lineBarsData: [\r\n          LineChartBarData(\r\n            spots: spots,\r\n            isCurved: true,\r\n            color: Colors.blueAccent,\r\n            barWidth: 2,\r\n            dotData: FlDotData(show: false),\r\n          ),\r\n        ],\r\n        titlesData: FlTitlesData(\r\n          show: false,\r\n        ),\r\n        gridData: FlGridData(show: false),\r\n        borderData: FlBorderData(show: false),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}