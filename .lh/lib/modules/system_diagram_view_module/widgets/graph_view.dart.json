{
    "sourceFile": "lib/modules/system_diagram_view_module/widgets/graph_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726318117096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726318284993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:fl_chart/fl_chart.dart';\r\n-import '../providers/diagram_experiment_planner_provider.dart';\r\n+import '../../../core/providers/experiment_planner_provider.dart';\r\n \r\n class GraphView extends StatefulWidget {\r\n   const GraphView({Key? key}) : super(key: key);\r\n \r\n"
                }
            ],
            "date": 1726318117096,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport '../providers/diagram_experiment_planner_provider.dart';\r\n\r\nclass GraphView extends StatefulWidget {\r\n  const GraphView({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _GraphViewState createState() => _GraphViewState();\r\n}\r\n\r\nclass _GraphViewState extends State<GraphView> {\r\n  List<String> selectedComponents = [];\r\n  List<String> selectedParameters = [];\r\n  String timeRange = '1h';\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Consumer<SystemStateProvider>(\r\n      builder: (context, provider, child) {\r\n        return Padding(\r\n          padding: const EdgeInsets.all(16.0),\r\n          child: Column(\r\n            crossAxisAlignment: CrossAxisAlignment.start,\r\n            children: [\r\n              _buildSelectionArea(),\r\n              const SizedBox(height: 16),\r\n              _buildTimeRangeSelector(),\r\n              const SizedBox(height: 16),\r\n              Expanded(\r\n                child: _buildGraph(provider),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              _buildExportButtons(),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildSelectionArea() {\r\n    return Row(\r\n      children: [\r\n        Expanded(\r\n          child: _buildComponentSelector(),\r\n        ),\r\n        const SizedBox(width: 16),\r\n        Expanded(\r\n          child: _buildParameterSelector(),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget _buildComponentSelector() {\r\n    return DropdownButton<String>(\r\n      value: selectedComponents.isNotEmpty ? selectedComponents.first : null,\r\n      hint: const Text('Select Component'),\r\n      isExpanded: true,\r\n      onChanged: (String? newValue) {\r\n        if (newValue != null) {\r\n          setState(() {\r\n            selectedComponents = [newValue];\r\n            selectedParameters = [];\r\n          });\r\n        }\r\n      },\r\n      items: [\r\n        'Nitrogen Generator',\r\n        'Backline Heater',\r\n        'Frontline Heater',\r\n        'Precursor Heater 1',\r\n        'Precursor Heater 2',\r\n        'Reaction Chamber',\r\n        'Valve 1',\r\n        'Valve 2',\r\n        'Pressure Control System',\r\n        'Vacuum Pump',\r\n      ].map<DropdownMenuItem<String>>((String value) {\r\n        return DropdownMenuItem<String>(\r\n          value: value,\r\n          child: Text(value),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n\r\n  Widget _buildParameterSelector() {\r\n    final parameters = _getParametersForComponent(selectedComponents.firstOrNull);\r\n    return DropdownButton<String>(\r\n      value: selectedParameters.isNotEmpty ? selectedParameters.first : null,\r\n      hint: const Text('Select Parameter'),\r\n      isExpanded: true,\r\n      onChanged: (String? newValue) {\r\n        if (newValue != null) {\r\n          setState(() {\r\n            selectedParameters = [newValue];\r\n          });\r\n        }\r\n      },\r\n      items: parameters.map<DropdownMenuItem<String>>((String value) {\r\n        return DropdownMenuItem<String>(\r\n          value: value,\r\n          child: Text(value),\r\n        );\r\n      }).toList(),\r\n    );\r\n  }\r\n\r\n  List<String> _getParametersForComponent(String? componentName) {\r\n    switch (componentName) {\r\n      case 'Nitrogen Generator':\r\n        return ['flow_rate'];\r\n      case 'Backline Heater':\r\n      case 'Frontline Heater':\r\n      case 'Precursor Heater 1':\r\n      case 'Precursor Heater 2':\r\n        return ['temperature'];\r\n      case 'Reaction Chamber':\r\n        return ['temperature', 'pressure'];\r\n      case 'Valve 1':\r\n      case 'Valve 2':\r\n        return ['position'];\r\n      case 'Pressure Control System':\r\n        return ['pressure'];\r\n      case 'Vacuum Pump':\r\n        return ['power'];\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n\r\n  Widget _buildTimeRangeSelector() {\r\n    return SegmentedButton<String>(\r\n      segments: const [\r\n        ButtonSegment<String>(value: '1h', label: Text('1h')),\r\n        ButtonSegment<String>(value: '24h', label: Text('24h')),\r\n        ButtonSegment<String>(value: '7d', label: Text('7d')),\r\n      ],\r\n      selected: {timeRange},\r\n      onSelectionChanged: (Set<String> newSelection) {\r\n        setState(() {\r\n          timeRange = newSelection.first;\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  Widget _buildGraph(SystemStateProvider provider) {\r\n    if (selectedComponents.isEmpty || selectedParameters.isEmpty) {\r\n      return const Center(child: Text('Select a component and parameter to display the graph.'));\r\n    }\r\n\r\n    final component = provider.getComponentByName(selectedComponents.first);\r\n    final parameter = selectedParameters.first;\r\n    final data = component?.currentValues[parameter] ?? 0.0;\r\n\r\n    // In a real app, we would fetch historical data based on the selected time range\r\n    // For this example, we'll generate some mock data\r\n    final List<FlSpot> spots = List.generate(100, (index) {\r\n      return FlSpot(index.toDouble(), data + (index * 0.1));\r\n    });\r\n\r\n    return LineChart(\r\n      LineChartData(\r\n        gridData: FlGridData(show: true),\r\n        titlesData: FlTitlesData(show: true),\r\n        borderData: FlBorderData(show: true),\r\n        lineBarsData: [\r\n          LineChartBarData(\r\n            spots: spots,\r\n            isCurved: true,\r\n            color: Colors.blue,\r\n            dotData: FlDotData(show: false),\r\n            belowBarData: BarAreaData(show: true),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildExportButtons() {\r\n    return Row(\r\n      mainAxisAlignment: MainAxisAlignment.end,\r\n      children: [\r\n        ElevatedButton(\r\n          onPressed: _exportAsCSV,\r\n          child: const Text('Export as CSV'),\r\n        ),\r\n        const SizedBox(width: 16),\r\n        ElevatedButton(\r\n          onPressed: _exportAsImage,\r\n          child: const Text('Export as Image'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _exportAsCSV() {\r\n    // Implement CSV export functionality\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      const SnackBar(content: Text('CSV export not implemented yet')),\r\n    );\r\n  }\r\n\r\n  void _exportAsImage() {\r\n    // Implement image export functionality\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      const SnackBar(content: Text('Image export not implemented yet')),\r\n    );\r\n  }\r\n}"
        }
    ]
}