{
    "sourceFile": "lib/modules/system_diagram_view_module/widgets/component_control_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726318117097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726318284963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+// component_control_overlay.dart\r\n+\r\n+import 'dart:convert';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:provider/provider.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n+import '../../../core/models/system_component.dart';\r\n+import '../../../core/providers/experiment_planner_provider.dart';\r\n+import '../../../core/providers/experiment_planner_provider.dart';\r\n+import 'component_control_dialog.dart';\r\n+\r\n+class ComponentControlOverlay extends StatefulWidget {\r\n+  @override\r\n+  _ComponentControlOverlayState createState() => _ComponentControlOverlayState();\r\n+}\r\n+\r\n+class _ComponentControlOverlayState extends State<ComponentControlOverlay> {\r\n+  Map<String, Offset> _componentPositions = {};\r\n+  Size _svgSize = Size.zero;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _loadComponentPositions();\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      _updateSvgSize();\r\n+    });\r\n+  }\r\n+\r\n+  void _updateSvgSize() {\r\n+    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n+    if (renderBox != null) {\r\n+      setState(() {\r\n+        _svgSize = renderBox.size;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> _resetComponentPositions() async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    await prefs.remove('component_positions_control_overlay');\r\n+    _initializeDefaultPositions();\r\n+    setState(() {}); // Refresh the UI\r\n+  }\r\n+\r\n+\r\n+\r\n+  void _initializeDefaultPositions() {\r\n+    setState(() {\r\n+      final fixedPosition = Offset(_svgSize.width * 0.8, _svgSize.height * 0.8);\r\n+      _componentPositions = {\r\n+        'Nitrogen Generator': fixedPosition,\r\n+        'MFC': fixedPosition,\r\n+        'Backline Heater': fixedPosition,\r\n+        'Frontline Heater': fixedPosition,\r\n+        'Precursor Heater 1': fixedPosition,\r\n+        'Precursor Heater 2': fixedPosition,\r\n+        'Reaction Chamber': fixedPosition,\r\n+        'Valve 1': fixedPosition,\r\n+        'Valve 2': fixedPosition,\r\n+        'Pressure Control System': fixedPosition,\r\n+        'Vacuum Pump': fixedPosition, // Ensure this line is included\r\n+      };\r\n+    });\r\n+  }\r\n+\r\n+\r\n+  Future<void> _loadComponentPositions() async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    final positionsJson = prefs.getString('component_positions_control_overlay');\r\n+\r\n+    // Initialize default positions\r\n+    Map<String, Offset> defaultPositions = {};\r\n+    _initializeDefaultPositions();\r\n+    defaultPositions = Map<String, Offset>.from(_componentPositions);\r\n+\r\n+    if (positionsJson != null) {\r\n+      final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n+      setState(() {\r\n+        _componentPositions = positionsMap.map((key, value) {\r\n+          final offsetList = (value as List<dynamic>).cast<double>();\r\n+          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n+        });\r\n+        // Ensure all components are included\r\n+        defaultPositions.forEach((key, value) {\r\n+          if (!_componentPositions.containsKey(key)) {\r\n+            _componentPositions[key] = value;\r\n+          }\r\n+        });\r\n+      });\r\n+    } else {\r\n+      // If no saved positions, use default positions\r\n+      setState(() {\r\n+        _componentPositions = defaultPositions;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  Future<void> _saveComponentPositions() async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    final positionsMap = _componentPositions.map((key, value) {\r\n+      return MapEntry(key, [value.dx, value.dy]);\r\n+    });\r\n+    await prefs.setString('component_positions_control_overlay', jsonEncode(positionsMap));\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Consumer<SystemStateProvider>(\r\n+      builder: (context, systemStateProvider, child) {\r\n+        return Stack(\r\n+          children: [\r\n+            ..._componentPositions.entries.map((entry) {\r\n+              final componentName = entry.key;\r\n+              final componentPosition = entry.value;\r\n+\r\n+              // Get the component by name from the provider\r\n+              print('Processing component:  $componentName');\r\n+\r\n+              final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n+\r\n+              // After retrieving the component\r\n+              print('Retrieved component: ${component.name}');\r\n+\r\n+              return Positioned(\r\n+                left: componentPosition.dx,\r\n+                top: componentPosition.dy,\r\n+                child: GestureDetector(\r\n+                  onPanUpdate: (details) {\r\n+                    setState(() {\r\n+                      _componentPositions[componentName] = Offset(\r\n+                        componentPosition.dx + details.delta.dx,\r\n+                        componentPosition.dy + details.delta.dy,\r\n+                      );\r\n+                    });\r\n+                  },\r\n+                  onPanEnd: (_) {\r\n+                    _saveComponentPositions();\r\n+                  },\r\n+                  onTap: () => _showComponentControlDialog(context, component),\r\n+                  child: Container(\r\n+                    width: 40, // Touch area size\r\n+                    height: 40,\r\n+                    alignment: Alignment.center,\r\n+                    child: Container(\r\n+                      width: 10, // Smaller visual dot size\r\n+                      height: 10,\r\n+                      decoration: BoxDecoration(\r\n+                        color: component.isActivated ? _getStatusColor(component.status) : Colors.grey,\r\n+                        shape: BoxShape.circle,\r\n+                        border: Border.all(color: Colors.white, width: 1),\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              );\r\n+            }).toList(),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showComponentControlDialog(BuildContext context, SystemComponent component) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) => ComponentControlDialog(component: component),\r\n+    );\r\n+  }\r\n+\r\n+  Color _getStatusColor(ComponentStatus status) {\r\n+    switch (status) {\r\n+      case ComponentStatus.normal:\r\n+        return Colors.green;\r\n+      case ComponentStatus.warning:\r\n+        return Colors.yellow;\r\n+      case ComponentStatus.error:\r\n+        return Colors.red;\r\n+      default:\r\n+        return Colors.grey;\r\n+    }\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1726318117097,
            "name": "Commit-0",
            "content": "// component_control_overlay.dart\r\n\r\nimport 'dart:convert';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../providers/diagram_experiment_planner_provider.dart';\r\nimport 'component_control_dialog.dart';\r\n\r\nclass ComponentControlOverlay extends StatefulWidget {\r\n  @override\r\n  _ComponentControlOverlayState createState() => _ComponentControlOverlayState();\r\n}\r\n\r\nclass _ComponentControlOverlayState extends State<ComponentControlOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size _svgSize = Size.zero;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _updateSvgSize();\r\n    });\r\n  }\r\n\r\n  void _updateSvgSize() {\r\n    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _svgSize = renderBox.size;\r\n      });\r\n    }\r\n  }\r\n\r\n  Future<void> _resetComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.remove('component_positions_control_overlay');\r\n    _initializeDefaultPositions();\r\n    setState(() {}); // Refresh the UI\r\n  }\r\n\r\n\r\n\r\n  void _initializeDefaultPositions() {\r\n    setState(() {\r\n      final fixedPosition = Offset(_svgSize.width * 0.8, _svgSize.height * 0.8);\r\n      _componentPositions = {\r\n        'Nitrogen Generator': fixedPosition,\r\n        'MFC': fixedPosition,\r\n        'Backline Heater': fixedPosition,\r\n        'Frontline Heater': fixedPosition,\r\n        'Precursor Heater 1': fixedPosition,\r\n        'Precursor Heater 2': fixedPosition,\r\n        'Reaction Chamber': fixedPosition,\r\n        'Valve 1': fixedPosition,\r\n        'Valve 2': fixedPosition,\r\n        'Pressure Control System': fixedPosition,\r\n        'Vacuum Pump': fixedPosition, // Ensure this line is included\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n  Future<void> _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = prefs.getString('component_positions_control_overlay');\r\n\r\n    // Initialize default positions\r\n    Map<String, Offset> defaultPositions = {};\r\n    _initializeDefaultPositions();\r\n    defaultPositions = Map<String, Offset>.from(_componentPositions);\r\n\r\n    if (positionsJson != null) {\r\n      final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n      setState(() {\r\n        _componentPositions = positionsMap.map((key, value) {\r\n          final offsetList = (value as List<dynamic>).cast<double>();\r\n          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n        });\r\n        // Ensure all components are included\r\n        defaultPositions.forEach((key, value) {\r\n          if (!_componentPositions.containsKey(key)) {\r\n            _componentPositions[key] = value;\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      // If no saved positions, use default positions\r\n      setState(() {\r\n        _componentPositions = defaultPositions;\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  Future<void> _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _componentPositions.map((key, value) {\r\n      return MapEntry(key, [value.dx, value.dy]);\r\n    });\r\n    await prefs.setString('component_positions_control_overlay', jsonEncode(positionsMap));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Consumer<SystemStateProvider>(\r\n      builder: (context, systemStateProvider, child) {\r\n        return Stack(\r\n          children: [\r\n            ..._componentPositions.entries.map((entry) {\r\n              final componentName = entry.key;\r\n              final componentPosition = entry.value;\r\n\r\n              // Get the component by name from the provider\r\n              print('Processing component:  $componentName');\r\n\r\n              final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n\r\n              // After retrieving the component\r\n              print('Retrieved component: ${component.name}');\r\n\r\n              return Positioned(\r\n                left: componentPosition.dx,\r\n                top: componentPosition.dy,\r\n                child: GestureDetector(\r\n                  onPanUpdate: (details) {\r\n                    setState(() {\r\n                      _componentPositions[componentName] = Offset(\r\n                        componentPosition.dx + details.delta.dx,\r\n                        componentPosition.dy + details.delta.dy,\r\n                      );\r\n                    });\r\n                  },\r\n                  onPanEnd: (_) {\r\n                    _saveComponentPositions();\r\n                  },\r\n                  onTap: () => _showComponentControlDialog(context, component),\r\n                  child: Container(\r\n                    width: 40, // Touch area size\r\n                    height: 40,\r\n                    alignment: Alignment.center,\r\n                    child: Container(\r\n                      width: 10, // Smaller visual dot size\r\n                      height: 10,\r\n                      decoration: BoxDecoration(\r\n                        color: component.isActivated ? _getStatusColor(component.status) : Colors.grey,\r\n                        shape: BoxShape.circle,\r\n                        border: Border.all(color: Colors.white, width: 1),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              );\r\n            }).toList(),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showComponentControlDialog(BuildContext context, SystemComponent component) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => ComponentControlDialog(component: component),\r\n    );\r\n  }\r\n\r\n  Color _getStatusColor(ComponentStatus status) {\r\n    switch (status) {\r\n      case ComponentStatus.normal:\r\n        return Colors.green;\r\n      case ComponentStatus.warning:\r\n        return Colors.yellow;\r\n      case ComponentStatus.error:\r\n        return Colors.red;\r\n      default:\r\n        return Colors.grey;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}