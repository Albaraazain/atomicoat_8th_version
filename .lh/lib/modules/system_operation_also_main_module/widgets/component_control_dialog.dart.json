{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/component_control_dialog.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1726411660068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726412330833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import '../models/system_component.dart';\r\n-import '../providers/experiment_planner_provider.dart';\r\n+import '../providers/system_provider.dart';\r\n \r\n class ComponentControlDialog extends StatefulWidget {\r\n   final SystemComponent component;\r\n \r\n"
                },
                {
                    "date": 1730750143653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,135 @@\n-// component_control_dialog.dart\r\n+// lib/widgets/component_control_dialog.dart\r\n \r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_copmonent_provider.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import '../models/system_component.dart';\r\n-import '../providers/system_provider.dart';\r\n+import '../models/recipe.dart';\r\n \r\n class ComponentControlDialog extends StatefulWidget {\r\n   final SystemComponent component;\r\n+  final bool isActiveInCurrentStep;\r\n+  final RecipeStep? currentRecipeStep;\r\n \r\n-  ComponentControlDialog({required this.component});\r\n+  ComponentControlDialog({\r\n+    required this.component,\r\n+    required this.isActiveInCurrentStep,\r\n+    this.currentRecipeStep,\r\n+  });\r\n \r\n   @override\r\n   _ComponentControlDialogState createState() => _ComponentControlDialogState();\r\n }\r\n \r\n class _ComponentControlDialogState extends State<ComponentControlDialog> {\r\n+  final _formKey = GlobalKey<FormState>();\r\n   late Map<String, TextEditingController> _controllers;\r\n-  bool _isActivated = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    _isActivated = widget.component.isActivated;\r\n     _controllers = {\r\n-      for (var key in widget.component.setValues.keys)\r\n-        key: TextEditingController(text: widget.component.setValues[key]?.toString() ?? ''),\r\n+      for (var entry in widget.component.setValues.entries)\r\n+        entry.key: TextEditingController(text: entry.value.toString())\r\n     };\r\n   }\r\n \r\n   @override\r\n+  void dispose() {\r\n+    _controllers.forEach((key, controller) => controller.dispose());\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void _updateSetValues(BuildContext context) {\r\n+    if (_formKey.currentState!.validate()) {\r\n+      final systemProvider = Provider.of<SystemComponentProvider>(context, listen: false);\r\n+      _controllers.forEach((parameter, controller) {\r\n+        double? newValue = double.tryParse(controller.text);\r\n+        if (newValue != null) {\r\n+          systemProvider.setComponentSetValue(widget.component.name, parameter, newValue);\r\n+        }\r\n+      });\r\n+      Navigator.of(context).pop();\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n   Widget build(BuildContext context) {\r\n-    final systemStateProvider = Provider.of<SystemStateProvider>(context, listen: false);\r\n-\r\n     return AlertDialog(\r\n-      title: Text('Configure ${widget.component.name}'),\r\n+      title: Text(widget.component.name),\r\n       content: SingleChildScrollView(\r\n-        child: Column(\r\n-          children: [\r\n-            SwitchListTile(\r\n-              title: Text('Activate Component'),\r\n-              value: _isActivated,\r\n-              onChanged: (value) {\r\n-                setState(() {\r\n-                  _isActivated = value;\r\n-                });\r\n-              },\r\n-            ),\r\n-            ...widget.component.setValues.keys.map((parameter) {\r\n-              return TextField(\r\n-                controller: _controllers[parameter],\r\n-                decoration: InputDecoration(labelText: 'Set ${parameter}'),\r\n-                keyboardType: TextInputType.number,\r\n-              );\r\n-            }).toList(),\r\n-          ],\r\n+        child: Form(\r\n+          key: _formKey,\r\n+          child: Column(\r\n+            crossAxisAlignment: CrossAxisAlignment.start,\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              Text('Status: ${widget.component.isActivated ? \"Active\" : \"Inactive\"}'),\r\n+              SizedBox(height: 10),\r\n+              Text('Current Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+              ...widget.component.currentValues.entries.map((entry) =>\r\n+                  Text('  ${entry.key}: ${entry.value.toStringAsFixed(2)}')\r\n+              ),\r\n+              SizedBox(height: 10),\r\n+              Text('Set Values:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+              ...widget.component.setValues.entries.map((entry) => Padding(\r\n+                padding: const EdgeInsets.symmetric(vertical: 4.0),\r\n+                child: TextFormField(\r\n+                  controller: _controllers[entry.key],\r\n+                  decoration: InputDecoration(\r\n+                    labelText: entry.key,\r\n+                    border: OutlineInputBorder(),\r\n+                  ),\r\n+                  keyboardType: TextInputType.numberWithOptions(decimal: true),\r\n+                  validator: (value) {\r\n+                    if (value == null || value.isEmpty) {\r\n+                      return 'Please enter a value';\r\n+                    }\r\n+                    if (double.tryParse(value) == null) {\r\n+                      return 'Invalid number';\r\n+                    }\r\n+                    return null;\r\n+                  },\r\n+                ),\r\n+              )),\r\n+              SizedBox(height: 10),\r\n+              Text('Active in Current Step: ${widget.isActiveInCurrentStep ? \"Yes\" : \"No\"}'),\r\n+              if (widget.currentRecipeStep != null) ...[\r\n+                SizedBox(height: 10),\r\n+                Text('Current Recipe Step:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n+                Text('  Type: ${widget.currentRecipeStep!.type}'),\r\n+                ...widget.currentRecipeStep!.parameters.entries.map((entry) =>\r\n+                    Text('  ${entry.key}: ${entry.value}')\r\n+                ),\r\n+              ],\r\n+            ],\r\n+          ),\r\n         ),\r\n       ),\r\n       actions: [\r\n         TextButton(\r\n-          onPressed: () {\r\n-            // Update component activation\r\n-            if (_isActivated) {\r\n-              systemStateProvider.activateComponent(widget.component.name);\r\n-            } else {\r\n-              systemStateProvider.deactivateComponent(widget.component.name);\r\n-            }\r\n-\r\n-            // Update set values\r\n-            widget.component.setValues.keys.forEach((parameter) {\r\n-              final value = double.tryParse(_controllers[parameter]!.text);\r\n-              if (value != null) {\r\n-                systemStateProvider.setComponentSetValue(widget.component.name, parameter, value);\r\n-              }\r\n-            });\r\n-\r\n-            Navigator.of(context).pop();\r\n-          },\r\n-          child: Text('Save'),\r\n+          onPressed: () => Navigator.of(context).pop(),\r\n+          child: Text('Close'),\r\n         ),\r\n+        TextButton(\r\n+          onPressed: () => _updateSetValues(context),\r\n+          child: Text('Update'),\r\n+        ),\r\n+        TextButton(\r\n+          onPressed: () => _toggleComponentActivation(context),\r\n+          child: Text(widget.component.isActivated ? 'Deactivate' : 'Activate'),\r\n+        ),\r\n       ],\r\n     );\r\n   }\r\n+\r\n+  void _toggleComponentActivation(BuildContext context) {\r\n+    final systemProvider = Provider.of<SystemComponentProvider>(context, listen: false);\r\n+    if (widget.component.isActivated) {\r\n+      systemProvider.deactivateComponent(widget.component.name);\r\n+    } else {\r\n+      systemProvider.activateComponent(widget.component.name);\r\n+    }\r\n+    Navigator.of(context).pop();\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1730750167918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,19 +40,20 @@\n     super.dispose();\r\n   }\r\n \r\n   void _updateSetValues(BuildContext context) {\r\n-    if (_formKey.currentState!.validate()) {\r\n-      final systemProvider = Provider.of<SystemComponentProvider>(context, listen: false);\r\n-      _controllers.forEach((parameter, controller) {\r\n-        double? newValue = double.tryParse(controller.text);\r\n-        if (newValue != null) {\r\n-          systemProvider.setComponentSetValue(widget.component.name, parameter, newValue);\r\n-        }\r\n-      });\r\n-      Navigator.of(context).pop();\r\n-    }\r\n+  if (_formKey.currentState!.validate()) {\r\n+    final systemProvider = Provider.of<SystemComponentProvider>(context, listen: false);\r\n+    _controllers.forEach((parameter, controller) {\r\n+      double? newValue = double.tryParse(controller.text);\r\n+      if (newValue != null) {\r\n+        // Use the new method instead\r\n+        systemProvider.updateComponentValue(widget.component.name, parameter, newValue);\r\n+      }\r\n+    });\r\n+    Navigator.of(context).pop();\r\n   }\r\n+}\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return AlertDialog(\r\n"
                }
            ],
            "date": 1726411660068,
            "name": "Commit-0",
            "content": "// component_control_dialog.dart\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../models/system_component.dart';\r\nimport '../providers/experiment_planner_provider.dart';\r\n\r\nclass ComponentControlDialog extends StatefulWidget {\r\n  final SystemComponent component;\r\n\r\n  ComponentControlDialog({required this.component});\r\n\r\n  @override\r\n  _ComponentControlDialogState createState() => _ComponentControlDialogState();\r\n}\r\n\r\nclass _ComponentControlDialogState extends State<ComponentControlDialog> {\r\n  late Map<String, TextEditingController> _controllers;\r\n  bool _isActivated = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _isActivated = widget.component.isActivated;\r\n    _controllers = {\r\n      for (var key in widget.component.setValues.keys)\r\n        key: TextEditingController(text: widget.component.setValues[key]?.toString() ?? ''),\r\n    };\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final systemStateProvider = Provider.of<SystemStateProvider>(context, listen: false);\r\n\r\n    return AlertDialog(\r\n      title: Text('Configure ${widget.component.name}'),\r\n      content: SingleChildScrollView(\r\n        child: Column(\r\n          children: [\r\n            SwitchListTile(\r\n              title: Text('Activate Component'),\r\n              value: _isActivated,\r\n              onChanged: (value) {\r\n                setState(() {\r\n                  _isActivated = value;\r\n                });\r\n              },\r\n            ),\r\n            ...widget.component.setValues.keys.map((parameter) {\r\n              return TextField(\r\n                controller: _controllers[parameter],\r\n                decoration: InputDecoration(labelText: 'Set ${parameter}'),\r\n                keyboardType: TextInputType.number,\r\n              );\r\n            }).toList(),\r\n          ],\r\n        ),\r\n      ),\r\n      actions: [\r\n        TextButton(\r\n          onPressed: () {\r\n            // Update component activation\r\n            if (_isActivated) {\r\n              systemStateProvider.activateComponent(widget.component.name);\r\n            } else {\r\n              systemStateProvider.deactivateComponent(widget.component.name);\r\n            }\r\n\r\n            // Update set values\r\n            widget.component.setValues.keys.forEach((parameter) {\r\n              final value = double.tryParse(_controllers[parameter]!.text);\r\n              if (value != null) {\r\n                systemStateProvider.setComponentSetValue(widget.component.name, parameter, value);\r\n              }\r\n            });\r\n\r\n            Navigator.of(context).pop();\r\n          },\r\n          child: Text('Save'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}