{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/troubleshooting_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726411660067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726412330825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import '../models/system_component.dart';\r\n-import '../providers/experiment_planner_provider.dart';\r\n+import '../providers/system_provider.dart';\r\n \r\n class TroubleshootingOverlay extends StatefulWidget {\r\n   final String overlayId; // Added to distinguish between instances\r\n \r\n"
                }
            ],
            "date": 1726411660067,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../models/system_component.dart';\r\nimport '../providers/experiment_planner_provider.dart';\r\n\r\nclass TroubleshootingOverlay extends StatefulWidget {\r\n  final String overlayId; // Added to distinguish between instances\r\n\r\n  TroubleshootingOverlay({required this.overlayId});\r\n\r\n  @override\r\n  _TroubleshootingOverlayState createState() => _TroubleshootingOverlayState();\r\n}\r\n\r\nclass _TroubleshootingOverlayState extends State<TroubleshootingOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size _diagramSize = Size.zero;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _updateDiagramSize();\r\n    });\r\n  }\r\n\r\n  void _updateDiagramSize() {\r\n    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _diagramSize = renderBox.size;\r\n      });\r\n      // Initialize default positions after diagram size is known\r\n      if (_componentPositions.isEmpty) {\r\n        _initializeDefaultPositions();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _resetComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.remove('component_positions_troubleshooting_overlay_${widget.overlayId}');\r\n    _initializeDefaultPositions();\r\n    setState(() {}); // Refresh the UI\r\n  }\r\n\r\n  void _initializeDefaultPositions() {\r\n    if (_diagramSize == Size.zero) return; // Diagram size not yet available\r\n\r\n    setState(() {\r\n      _componentPositions = {\r\n        'Nitrogen Generator': Offset(_diagramSize.width * 0.10, _diagramSize.height * 0.80),\r\n        'MFC': Offset(_diagramSize.width * 0.20, _diagramSize.height * 0.70),\r\n        'Backline Heater': Offset(_diagramSize.width * 0.30, _diagramSize.height * 0.60),\r\n        'Frontline Heater': Offset(_diagramSize.width * 0.40, _diagramSize.height * 0.50),\r\n        'Precursor Heater 1': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.40),\r\n        'Precursor Heater 2': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.30),\r\n        'Reaction Chamber': Offset(_diagramSize.width * 0.70, _diagramSize.height * 0.20),\r\n        'Valve 1': Offset(_diagramSize.width * 0.80, _diagramSize.height * 0.10),\r\n        'Valve 2': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.10),\r\n        'Pressure Control System': Offset(_diagramSize.width * 0.75, _diagramSize.height * 0.75),\r\n        'Vacuum Pump': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.85),\r\n      };\r\n    });\r\n  }\r\n\r\n  Future<void> _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = prefs.getString('component_positions_troubleshooting_overlay_${widget.overlayId}');\r\n\r\n    if (positionsJson != null) {\r\n      final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n      setState(() {\r\n        _componentPositions = positionsMap.map((key, value) {\r\n          final offsetList = (value as List<dynamic>).cast<double>();\r\n          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n        });\r\n      });\r\n    } else {\r\n      // Initialize default positions if no saved positions are found\r\n      _initializeDefaultPositions();\r\n    }\r\n  }\r\n\r\n  Future<void> _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _componentPositions.map((key, value) {\r\n      return MapEntry(key, [value.dx, value.dy]);\r\n    });\r\n    await prefs.setString('component_positions_troubleshooting_overlay_${widget.overlayId}', jsonEncode(positionsMap));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Consumer<SystemStateProvider>(\r\n      builder: (context, systemStateProvider, child) {\r\n        return Stack(\r\n          children: _componentPositions.entries.map((entry) {\r\n            final componentName = entry.key;\r\n            final componentPosition = entry.value;\r\n\r\n            // Get the component by name from the provider\r\n            final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n\r\n            // Only display components that have warnings or errors\r\n            if (component.status == ComponentStatus.normal) {\r\n              return SizedBox.shrink();\r\n            }\r\n\r\n            // Calculate absolute position based on componentPosition\r\n            final left = componentPosition.dx;\r\n            final top = componentPosition.dy;\r\n\r\n            return Positioned(\r\n              left: left - 20, // Adjust to center the icon\r\n              top: top - 20,\r\n              child: GestureDetector(\r\n                onPanUpdate: (details) {\r\n                  setState(() {\r\n                    _componentPositions[componentName] = Offset(\r\n                      _componentPositions[componentName]!.dx + details.delta.dx,\r\n                      _componentPositions[componentName]!.dy + details.delta.dy,\r\n                    );\r\n                  });\r\n                },\r\n                onPanEnd: (_) {\r\n                  _saveComponentPositions();\r\n                },\r\n                onTap: () => _showTroubleshootingDialog(context, component),\r\n                child: Icon(\r\n                  Icons.warning,\r\n                  color: _getStatusColor(component.status),\r\n                  size: 40,\r\n                ),\r\n              ),\r\n            );\r\n          }).toList(),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showTroubleshootingDialog(BuildContext context, SystemComponent component) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: Text('Troubleshoot ${component.name}'),\r\n        content: SingleChildScrollView(\r\n          child: Column(\r\n            children: [\r\n              Text('Status: ${component.status.toString().split('.').last}'),\r\n              SizedBox(height: 10),\r\n              if (component.errorMessages.isNotEmpty)\r\n                ...component.errorMessages.map((message) => Text('- $message')).toList()\r\n              else\r\n                Text('No error messages.'),\r\n            ],\r\n          ),\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () {\r\n              final systemStateProvider = Provider.of<SystemStateProvider>(context, listen: false);\r\n              systemStateProvider.runDiagnostic(component.name);\r\n              Navigator.of(context).pop();\r\n            },\r\n            child: Text('Run Diagnostic'),\r\n          ),\r\n          TextButton(\r\n            onPressed: () => Navigator.of(context).pop(),\r\n            child: Text('Close'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Color _getStatusColor(ComponentStatus status) {\r\n    switch (status) {\r\n      case ComponentStatus.warning:\r\n        return Colors.yellow;\r\n      case ComponentStatus.error:\r\n        return Colors.red;\r\n      default:\r\n        return Colors.grey;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}