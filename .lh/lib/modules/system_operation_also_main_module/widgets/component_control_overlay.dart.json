{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/component_control_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726411660069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726412330847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import '../models/system_component.dart';\r\n-import '../providers/experiment_planner_provider.dart';\r\n+import '../providers/system_provider.dart';\r\n import 'component_control_dialog.dart';\r\n \r\n class ComponentControlOverlay extends StatefulWidget {\r\n   final String overlayId;\r\n"
                }
            ],
            "date": 1726411660069,
            "name": "Commit-0",
            "content": "// component_control_overlay.dart\r\n\r\nimport 'dart:convert';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../models/system_component.dart';\r\nimport '../providers/experiment_planner_provider.dart';\r\nimport 'component_control_dialog.dart';\r\n\r\nclass ComponentControlOverlay extends StatefulWidget {\r\n  final String overlayId;\r\n\r\n  ComponentControlOverlay({required this.overlayId});\r\n\r\n  @override\r\n  _ComponentControlOverlayState createState() => _ComponentControlOverlayState();\r\n}\r\n\r\nclass _ComponentControlOverlayState extends State<ComponentControlOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size _diagramSize = Size.zero;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _updateDiagramSize();\r\n    });\r\n  }\r\n\r\n  void _updateDiagramSize() {\r\n    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _diagramSize = renderBox.size;\r\n      });\r\n      // Initialize default positions after diagram size is known\r\n      if (_componentPositions.isEmpty) {\r\n        _initializeDefaultPositions();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _resetComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.remove('component_positions_${widget.overlayId}');\r\n    _initializeDefaultPositions();\r\n    setState(() {}); // Refresh the UI\r\n  }\r\n\r\n  void _initializeDefaultPositions() {\r\n    if (_diagramSize == Size.zero) return; // Diagram size not yet available\r\n\r\n    setState(() {\r\n      _componentPositions = {\r\n        'Nitrogen Generator': Offset(_diagramSize.width * 0.05, _diagramSize.height * 0.50),\r\n        'MFC': Offset(_diagramSize.width * 0.15, _diagramSize.height * 0.50),\r\n        'Backline Heater': Offset(_diagramSize.width * 0.25, _diagramSize.height * 0.50),\r\n        'Frontline Heater': Offset(_diagramSize.width * 0.35, _diagramSize.height * 0.50),\r\n        'Precursor Heater 1': Offset(_diagramSize.width * 0.45, _diagramSize.height * 0.40),\r\n        'Precursor Heater 2': Offset(_diagramSize.width * 0.45, _diagramSize.height * 0.60),\r\n        'Reaction Chamber': Offset(_diagramSize.width * 0.60, _diagramSize.height * 0.50),\r\n        'Valve 1': Offset(_diagramSize.width * 0.55, _diagramSize.height * 0.40),\r\n        'Valve 2': Offset(_diagramSize.width * 0.55, _diagramSize.height * 0.60),\r\n        'Pressure Control System': Offset(_diagramSize.width * 0.75, _diagramSize.height * 0.50),\r\n        'Vacuum Pump': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.50),\r\n      };\r\n    });\r\n  }\r\n\r\n  Future<void> _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = prefs.getString('component_positions_${widget.overlayId}');\r\n\r\n    if (positionsJson != null) {\r\n      final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n      setState(() {\r\n        _componentPositions = positionsMap.map((key, value) {\r\n          final offsetList = (value as List<dynamic>).cast<double>();\r\n          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n        });\r\n      });\r\n    } else {\r\n      // If no saved positions, initialize default positions\r\n      _initializeDefaultPositions();\r\n    }\r\n  }\r\n\r\n  Future<void> _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _componentPositions.map((key, value) {\r\n      return MapEntry(key, [value.dx, value.dy]);\r\n    });\r\n    await prefs.setString('component_positions_${widget.overlayId}', jsonEncode(positionsMap));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Consumer<SystemStateProvider>(\r\n      builder: (context, systemStateProvider, child) {\r\n        return GestureDetector(\r\n          behavior: HitTestBehavior.translucent,\r\n          onTapDown: (_) {\r\n            // Dismiss any open dialogs or focus\r\n            FocusScope.of(context).unfocus();\r\n          },\r\n          child: Stack(\r\n            children: [\r\n              ..._componentPositions.entries.map((entry) {\r\n                final componentName = entry.key;\r\n                final componentPosition = entry.value;\r\n\r\n                // Get the component by name from the provider\r\n                final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n\r\n                return Positioned(\r\n                  left: componentPosition.dx,\r\n                  top: componentPosition.dy,\r\n                  child: GestureDetector(\r\n                    behavior: HitTestBehavior.opaque,\r\n                    onPanStart: (details) {\r\n                      // Handle pan start if needed\r\n                    },\r\n                    onPanUpdate: (details) {\r\n                      setState(() {\r\n                        _componentPositions[componentName] = Offset(\r\n                          _componentPositions[componentName]!.dx + details.delta.dx,\r\n                          _componentPositions[componentName]!.dy + details.delta.dy,\r\n                        );\r\n                      });\r\n                    },\r\n                    onPanEnd: (_) {\r\n                      _saveComponentPositions();\r\n                    },\r\n                    onTapUp: (details) {\r\n                      _showComponentControlDialog(context, component);\r\n                    },\r\n                    child: Container(\r\n                      width: 40, // Touch area size\r\n                      height: 40,\r\n                      alignment: Alignment.center,\r\n                      child: Container(\r\n                        width: 10, // Visual dot size\r\n                        height: 10,\r\n                        decoration: BoxDecoration(\r\n                          color: component.isActivated ? _getStatusColor(component.status) : Colors.grey,\r\n                          shape: BoxShape.circle,\r\n                          border: Border.all(color: Colors.white, width: 1),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                );\r\n              }).toList(),\r\n              // Optional: Add a reset button for the overlay\r\n              Positioned(\r\n                top: 10,\r\n                right: 10,\r\n                child: IconButton(\r\n                  icon: Icon(Icons.refresh, color: Colors.white),\r\n                  onPressed: _resetComponentPositions,\r\n                  tooltip: 'Reset Component Positions',\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showComponentControlDialog(BuildContext context, SystemComponent component) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => ComponentControlDialog(component: component),\r\n    );\r\n  }\r\n\r\n  Color _getStatusColor(ComponentStatus status) {\r\n    switch (status) {\r\n      case ComponentStatus.normal:\r\n        return Colors.green;\r\n      case ComponentStatus.warning:\r\n        return Colors.yellow;\r\n      case ComponentStatus.error:\r\n        return Colors.red;\r\n      default:\r\n        return Colors.grey;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}