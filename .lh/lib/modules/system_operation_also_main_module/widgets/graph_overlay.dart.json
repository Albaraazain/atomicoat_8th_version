{
    "sourceFile": "lib/modules/system_operation_also_main_module/widgets/graph_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726411660067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726412330845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n import '../models/system_component.dart';\r\n-import '../providers/experiment_planner_provider.dart';\r\n \r\n class GraphOverlay extends StatefulWidget {\r\n   final String overlayId;\r\n \r\n"
                }
            ],
            "date": 1726411660067,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:fl_chart/fl_chart.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../models/system_component.dart';\r\nimport '../providers/experiment_planner_provider.dart';\r\n\r\nclass GraphOverlay extends StatefulWidget {\r\n  final String overlayId;\r\n\r\n  GraphOverlay({required this.overlayId});\r\n\r\n  @override\r\n  _GraphOverlayState createState() => _GraphOverlayState();\r\n}\r\n\r\nclass _GraphOverlayState extends State<GraphOverlay> {\r\n  Map<String, Offset> _componentPositions = {};\r\n  Size _diagramSize = Size.zero;\r\n  bool _isEditMode = false; // Added to track edit mode\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadComponentPositions();\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      _updateDiagramSize();\r\n    });\r\n  }\r\n\r\n  void _updateDiagramSize() {\r\n    final RenderBox? renderBox = context.findRenderObject() as RenderBox?;\r\n    if (renderBox != null) {\r\n      setState(() {\r\n        _diagramSize = renderBox.size;\r\n      });\r\n      // Initialize default positions after diagram size is known\r\n      if (_componentPositions.isEmpty) {\r\n        _initializeDefaultPositions();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _resetComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.remove('component_positions_graph_overlay_${widget.overlayId}');\r\n    _initializeDefaultPositions();\r\n    setState(() {}); // Refresh the UI\r\n  }\r\n\r\n  void _initializeDefaultPositions() {\r\n    if (_diagramSize == Size.zero) return; // Diagram size not yet available\r\n\r\n    setState(() {\r\n      _componentPositions = {\r\n        'Nitrogen Generator': Offset(_diagramSize.width * 0.05, _diagramSize.height * 0.80),\r\n        'MFC': Offset(_diagramSize.width * 0.20, _diagramSize.height * 0.70),\r\n        'Backline Heater': Offset(_diagramSize.width * 0.35, _diagramSize.height * 0.60),\r\n        'Frontline Heater': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.50),\r\n        'Precursor Heater 1': Offset(_diagramSize.width * 0.65, _diagramSize.height * 0.40),\r\n        'Precursor Heater 2': Offset(_diagramSize.width * 0.80, _diagramSize.height * 0.30),\r\n        'Reaction Chamber': Offset(_diagramSize.width * 0.50, _diagramSize.height * 0.20),\r\n        'Pressure Control System': Offset(_diagramSize.width * 0.75, _diagramSize.height * 0.75),\r\n        'Vacuum Pump': Offset(_diagramSize.width * 0.85, _diagramSize.height * 0.85),\r\n      };\r\n    });\r\n  }\r\n\r\n  Future<void> _loadComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsJson = prefs.getString('component_positions_graph_overlay_${widget.overlayId}');\r\n\r\n    if (positionsJson != null) {\r\n      final positionsMap = jsonDecode(positionsJson) as Map<String, dynamic>;\r\n      setState(() {\r\n        _componentPositions = positionsMap.map((key, value) {\r\n          final offsetList = (value as List<dynamic>).cast<double>();\r\n          return MapEntry(key, Offset(offsetList[0], offsetList[1]));\r\n        });\r\n      });\r\n    } else {\r\n      // Initialize default positions if no saved positions are found\r\n      _initializeDefaultPositions();\r\n    }\r\n  }\r\n\r\n  Future<void> _saveComponentPositions() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    final positionsMap = _componentPositions.map((key, value) {\r\n      return MapEntry(key, [value.dx, value.dy]);\r\n    });\r\n    await prefs.setString('component_positions_graph_overlay_${widget.overlayId}', jsonEncode(positionsMap));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // Define graph sizes based on overlayId\r\n    double graphWidth;\r\n    double graphHeight;\r\n    double horizontalOffset;\r\n    double verticalOffset;\r\n    double fontSize;\r\n\r\n    if (widget.overlayId == 'main_dashboard') {\r\n      // Smaller graphs for the small diagram view\r\n      graphWidth = 80;\r\n      graphHeight = 60;\r\n      fontSize = 8;\r\n    } else {\r\n      // Default sizes for the full diagram view\r\n      graphWidth = 100;\r\n      graphHeight = 80;\r\n      fontSize = 10;\r\n    }\r\n\r\n    // Offsets to center the graphs at the component positions\r\n    horizontalOffset = graphWidth / 2;\r\n    verticalOffset = graphHeight / 2;\r\n\r\n    return Stack(\r\n      children: [\r\n        Consumer<SystemStateProvider>(\r\n          builder: (context, systemStateProvider, child) {\r\n            return LayoutBuilder(\r\n              builder: (context, constraints) {\r\n                return Stack(\r\n                  children: _componentPositions.entries.map((entry) {\r\n                    final componentName = entry.key;\r\n                    final componentPosition = entry.value;\r\n\r\n                    // Get the component by name from the provider\r\n                    final component = systemStateProvider.getComponentByName(componentName);
if (component == null) return SizedBox.shrink();\r\n\r\n                    // Determine which parameter to plot\r\n                    final parameterToPlot = _getParameterToPlot(component);\r\n\r\n                    if (parameterToPlot == null) {\r\n                      return SizedBox.shrink();\r\n                    }\r\n\r\n                    // Calculate absolute position based on componentPosition\r\n                    final left = componentPosition.dx;\r\n                    final top = componentPosition.dy;\r\n\r\n                    return Positioned(\r\n                      left: left - horizontalOffset, // Adjust to center the graph\r\n                      top: top - verticalOffset,\r\n                      child: GestureDetector(\r\n                        behavior: HitTestBehavior.opaque,\r\n                        onPanUpdate: _isEditMode\r\n                            ? (details) {\r\n                          setState(() {\r\n                            // Update position while dragging\r\n                            _componentPositions[componentName] = Offset(\r\n                              _componentPositions[componentName]!.dx + details.delta.dx,\r\n                              _componentPositions[componentName]!.dy + details.delta.dy,\r\n                            );\r\n                          });\r\n                        }\r\n                            : null,\r\n                        onPanEnd: _isEditMode\r\n                            ? (_) {\r\n                          // Save positions when dragging ends\r\n                          _saveComponentPositions();\r\n                        }\r\n                            : null,\r\n                        child: Container(\r\n                          width: graphWidth,\r\n                          height: graphHeight,\r\n                          decoration: BoxDecoration(\r\n                            color: Colors.black54,\r\n                            borderRadius: BorderRadius.circular(8),\r\n                          ),\r\n                          padding: EdgeInsets.all(4),\r\n                          child: Column(\r\n                            children: [\r\n                              Text(\r\n                                '$componentName\\n($parameterToPlot)',\r\n                                style: TextStyle(color: Colors.white, fontSize: fontSize),\r\n                                textAlign: TextAlign.center,\r\n                              ),\r\n                              SizedBox(height: 4),\r\n                              Expanded(\r\n                                child: _buildGraph(component, parameterToPlot),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n                );\r\n              },\r\n            );\r\n          },\r\n        ),\r\n        // Toggle Button\r\n        Positioned(\r\n          top: 8,\r\n          right: 8,\r\n          child: GestureDetector(\r\n            onTap: () {\r\n              setState(() {\r\n                _isEditMode = !_isEditMode;\r\n              });\r\n            },\r\n            child: Container(\r\n              decoration: BoxDecoration(\r\n                color: _isEditMode ? Colors.blueAccent : Colors.grey,\r\n                shape: BoxShape.circle,\r\n              ),\r\n              padding: EdgeInsets.all(8),\r\n              child: Icon(\r\n                _isEditMode ? Icons.lock_open : Icons.lock,\r\n                color: Colors.white,\r\n                size: 20,\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  String? _getParameterToPlot(SystemComponent component) {\r\n    switch (component.name) {\r\n      case 'Nitrogen Generator':\r\n        return 'flow_rate';\r\n      case 'MFC':\r\n        return 'flow_rate';\r\n      case 'Backline Heater':\r\n      case 'Frontline Heater':\r\n      case 'Precursor Heater 1':\r\n      case 'Precursor Heater 2':\r\n        return 'temperature';\r\n      case 'Reaction Chamber':\r\n        return 'pressure';\r\n      case 'Pressure Control System':\r\n        return 'pressure';\r\n      case 'Vacuum Pump':\r\n        return 'power';\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  Widget _buildGraph(SystemComponent component, String parameter) {\r\n    final dataPoints = component.parameterHistory[parameter];\r\n\r\n    if (dataPoints == null || dataPoints.isEmpty) {\r\n      return Container(\r\n        color: Colors.black26,\r\n        child: Center(\r\n          child: Text(\r\n            'No data',\r\n            style: TextStyle(color: Colors.white, fontSize: 8),\r\n          ),\r\n        ),\r\n      );\r\n    }\r\n\r\n    // Get the set value for the parameter\r\n    double? setValue = component.setValues[parameter];\r\n\r\n    // Convert data points to spots\r\n    final firstTimestamp = dataPoints.first.timestamp.millisecondsSinceEpoch.toDouble();\r\n    List<FlSpot> spots = dataPoints.map((dp) {\r\n      double x = (dp.timestamp.millisecondsSinceEpoch.toDouble() - firstTimestamp) / 1000; // in seconds\r\n      double y = dp.value;\r\n      return FlSpot(x, y);\r\n    }).toList();\r\n\r\n    // Adjust Y-axis to center around the set value\r\n    double minY;\r\n    double maxY;\r\n\r\n    if (setValue != null) {\r\n      // Calculate deviations from set value\r\n      double maxDeviation = dataPoints\r\n          .map((dp) => (dp.value - setValue).abs())\r\n          .reduce((a, b) => a > b ? a : b);\r\n\r\n      // Set a minimum deviation range to ensure the graph is readable\r\n      double deviationRange = maxDeviation < 1 ? 1 : maxDeviation * 1.2;\r\n\r\n      minY = setValue - deviationRange;\r\n      maxY = setValue + deviationRange;\r\n    } else {\r\n      // Fallback if set value is not available\r\n      minY = dataPoints.map((dp) => dp.value).reduce((a, b) => a < b ? a : b) - 1;\r\n      maxY = dataPoints.map((dp) => dp.value).reduce((a, b) => a > b ? a : b) + 1;\r\n    }\r\n\r\n    return LineChart(\r\n      LineChartData(\r\n        minX: 0,\r\n        maxX: spots.isNotEmpty ? spots.last.x : 6,\r\n        minY: minY,\r\n        maxY: maxY,\r\n        lineBarsData: [\r\n          // Actual parameter line\r\n          LineChartBarData(\r\n            spots: spots,\r\n            isCurved: true,\r\n            color: Colors.blueAccent,\r\n            barWidth: 2,\r\n            dotData: FlDotData(show: false),\r\n          ),\r\n          // Reference line for set value\r\n          if (setValue != null)\r\n            LineChartBarData(\r\n              spots: [\r\n                FlSpot(0, setValue),\r\n                FlSpot(spots.isNotEmpty ? spots.last.x : 6, setValue),\r\n              ],\r\n              isCurved: false,\r\n              color: Colors.redAccent,\r\n              barWidth: 1,\r\n              dotData: FlDotData(show: false),\r\n              dashArray: [5, 5],\r\n            ),\r\n        ],\r\n        titlesData: FlTitlesData(\r\n          show: false,\r\n        ),\r\n        gridData: FlGridData(show: false),\r\n        borderData: FlBorderData(show: false),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}