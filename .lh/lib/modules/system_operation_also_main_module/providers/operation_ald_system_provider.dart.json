{
    "sourceFile": "lib/modules/system_operation_also_main_module/providers/operation_experiment_planner_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1726318174998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1726318174998,
            "name": "Commit-0",
            "content": "/*\r\nimport 'dart:async';\r\nimport 'package:flutter/foundation.dart';\r\nimport '../services/experiment_planner_simulation_service.dart';\r\n\r\nclass SystemStateProvider with ChangeNotifier {\r\n  final ALDSystemSimulationService _simulationService = ALDSystemSimulationService();\r\n  StreamSubscription<void>? _simulationSubscription;\r\n\r\n  SystemStateProvider() {\r\n    startSimulation();\r\n  }\r\n\r\n  // Getters\r\n  bool get n2GenActive => _simulationService.n2GenActive;\r\n  double get n2Flow => _simulationService.n2Flow;\r\n  double get mfcSetpoint => _simulationService.mfcSetpoint;\r\n  double get mfcActualFlow => _simulationService.mfcActualFlow;\r\n  bool get frontlineHeaterActive => _simulationService.frontlineHeaterActive;\r\n  double get frontlineTemperature => _simulationService.frontlineTemperature;\r\n  double get frontlineSetpoint => _simulationService.frontlineSetpoint;\r\n  double get chamberPressure => _simulationService.chamberPressure;\r\n  double get chamberTemperature => _simulationService.chamberTemperature;\r\n  bool get backlineHeaterActive => _simulationService.backlineHeaterActive;\r\n  double get backlineTemperature => _simulationService.backlineTemperature;\r\n  double get backlineSetpoint => _simulationService.backlineSetpoint;\r\n  double get pcSetpoint => _simulationService.pcSetpoint;\r\n  double get pcActualPressure => _simulationService.pcActualPressure;\r\n  bool get pumpActive => _simulationService.pumpActive;\r\n  bool get v1Open => _simulationService.v1Open;\r\n  bool get v2Open => _simulationService.v2Open;\r\n  bool get h1Active => _simulationService.h1Active;\r\n  bool get h2Active => _simulationService.h2Active;\r\n  double get h1Temperature => _simulationService.h1Temperature;\r\n  double get h2Temperature => _simulationService.h2Temperature;\r\n  double get h1Setpoint => _simulationService.h1Setpoint;\r\n  double get h2Setpoint => _simulationService.h2Setpoint;\r\n\r\n\r\n  // Control methods\r\n  void toggleN2Gen() {\r\n    _simulationService.toggleN2Gen();\r\n    notifyListeners();\r\n  }\r\n\r\n  void toggleMFC() {\r\n    if (_simulationService.mfcSetpoint > 0) {\r\n      _simulationService.setMFCSetpoint(0);\r\n    } else {\r\n      _simulationService.setMFCSetpoint(100); // Set to a default value when activating\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  void toggleFrontlineHeater() {\r\n    _simulationService.toggleFrontlineHeater();\r\n    notifyListeners();\r\n  }\r\n\r\n  void toggleBacklineHeater() {\r\n    _simulationService.toggleBacklineHeater();\r\n    notifyListeners();\r\n  }\r\n\r\n  void togglePump() {\r\n    _simulationService.togglePump();\r\n    notifyListeners();\r\n  }\r\n\r\n  void toggleValve(String valve) {\r\n    _simulationService.toggleValve(valve);\r\n    notifyListeners();\r\n  }\r\n\r\n  void toggleHeater(String heater) {\r\n    _simulationService.toggleHeater(heater);\r\n    notifyListeners();\r\n  }\r\n\r\n\r\n  void setMFCSetpoint(double setpoint) {\r\n    _simulationService.setMFCSetpoint(setpoint);\r\n    notifyListeners();\r\n  }\r\n\r\n  void setFrontlineSetpoint(double setpoint) {\r\n    _simulationService.setFrontlineSetpoint(setpoint);\r\n    notifyListeners();\r\n  }\r\n\r\n  void setBacklineSetpoint(double setpoint) {\r\n    _simulationService.setBacklineSetpoint(setpoint);\r\n    notifyListeners();\r\n  }\r\n\r\n  void setPCSetpoint(double setpoint) {\r\n    _simulationService.setPCSetpoint(setpoint);\r\n    notifyListeners();\r\n  }\r\n\r\n\r\n  void setHeaterSetpoint(String heater, double setpoint) {\r\n    _simulationService.setHeaterSetpoint(heater, setpoint);\r\n    notifyListeners();\r\n  }\r\n\r\n  void startSimulation() {\r\n    _simulationSubscription = _simulationService.startContinuousSimulation().listen((_) {\r\n      notifyListeners();\r\n    });\r\n  }\r\n\r\n  void stopSimulation() {\r\n    _simulationSubscription?.cancel();\r\n  }\r\n\r\n  void handleRecipeStep(Map<String, dynamic> parameters) {\r\n    parameters.forEach((key, value) {\r\n      switch (key) {\r\n        case 'v1':\r\n          if (_simulationService.v1Open != value) toggleValve('v1');\r\n          break;\r\n        case 'v2':\r\n          if (_simulationService.v2Open != value) toggleValve('v2');\r\n          break;\r\n        case 'purge_valve':\r\n        // Assuming purge_valve is controlled by both v1 and v2 being closed\r\n          if (value == true) {\r\n            if (_simulationService.v1Open) toggleValve('v1');\r\n            if (_simulationService.v2Open) toggleValve('v2');\r\n          }\r\n          break;\r\n        case 'frontline_heater':\r\n          if (_simulationService.frontlineHeaterActive != value) toggleFrontlineHeater();\r\n          break;\r\n        case 'backline_heater':\r\n          if (_simulationService.backlineHeaterActive != value) toggleBacklineHeater();\r\n          break;\r\n      // Add more cases as needed for other components\r\n      }\r\n    });\r\n    notifyListeners();\r\n  }\r\n\r\n\r\n  @override\r\n  void dispose() {\r\n    stopSimulation();\r\n    super.dispose();\r\n  }\r\n\r\n  // Methods to check if parameters are within normal ranges\r\n  bool isReactorPressureNormal() => chamberPressure >= 0.9 && chamberPressure <= 1.1;\r\n  bool isReactorTemperatureNormal() => chamberTemperature >= 145 && chamberTemperature <= 155;\r\n  bool isPrecursorTemperatureNormal(String precursor) {\r\n    if (precursor == 'Precursor A') {\r\n      return h1Temperature >= 28 && h1Temperature <= 32;\r\n    } else if (precursor == 'Precursor B') {\r\n      return h2Temperature >= 28 && h2Temperature <= 32;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  void emergencyStop() {\r\n    _simulationService.toggleN2Gen(); // Turn off N2 generator\r\n    _simulationService.setMFCSetpoint(0); // Set MFC to 0\r\n    _simulationService.toggleFrontlineHeater(); // Turn off frontline heater\r\n    _simulationService.toggleBacklineHeater(); // Turn off backline heater\r\n    _simulationService.togglePump(); // Turn off pump\r\n    _simulationService.toggleValve('v1'); // Close valve 1\r\n    _simulationService.toggleValve('v2'); // Close valve 2\r\n    _simulationService.toggleHeater('h1'); // Turn off heater 1\r\n    _simulationService.toggleHeater('h2'); // Turn off heater 2\r\n    notifyListeners();\r\n  }\r\n}*/\r\n"
        }
    ]
}