{
    "sourceFile": "lib/modules/system_operation_also_main_module/providers/system_state_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1730748900277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730748957695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,41 +316,32 @@\n       } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n         isReady = false;\r\n         issues.add('Nitrogen flow rate is too low');\r\n       }\r\n-    } else {\r\n-      isReady = false;\r\n-      issues.add('Nitrogen Generator not found');\r\n     }\r\n \r\n     // Check MFC\r\n     final mfc = getComponentByName('MFC');\r\n     if (mfc != null) {\r\n       if (!mfc.isActivated) {\r\n         isReady = false;\r\n         issues.add('MFC is not activated');\r\n-      } else if (mfc.currentValues['flow_rate']! != 20.0) {\r\n+      } else if (mfc.currentValues['flow_rate']! < 15.0 || mfc.currentValues['flow_rate']! > 25.0) {\r\n         isReady = false;\r\n-        issues.add('MFC flow rate is not set to 20 SCCM');\r\n+        issues.add('MFC flow rate is outside acceptable range (15-25 SCCM)');\r\n       }\r\n-    } else {\r\n-      isReady = false;\r\n-      issues.add('MFC not found');\r\n     }\r\n \r\n     // Check Pressure\r\n     final pressureControlSystem = getComponentByName('Pressure Control System');\r\n     if (pressureControlSystem != null) {\r\n       if (!pressureControlSystem.isActivated) {\r\n         isReady = false;\r\n         issues.add('Pressure Control System is not activated');\r\n-      } else if (pressureControlSystem.currentValues['pressure']! >= 760.0) {\r\n+      } else if (pressureControlSystem.currentValues['pressure']! > 10.0) { // Changed to more reasonable value\r\n         isReady = false;\r\n-        issues.add('Pressure is not below 760 Torr');\r\n+        issues.add('Pressure is too high (must be below 10 Torr)');\r\n       }\r\n-    } else {\r\n-      isReady = false;\r\n-      issues.add('Pressure Control System not found');\r\n     }\r\n \r\n     // Check Pump\r\n     final pump = getComponentByName('Vacuum Pump');\r\n@@ -499,19 +490,37 @@\n   }\r\n \r\n   bool validateSetVsMonitoredValues() {\r\n     bool isValid = true;\r\n+    final tolerance = 0.1; // 10% tolerance\r\n+    \r\n     for (var component in _componentProvider.components.values) {\r\n       for (var entry in component.currentValues.entries) {\r\n-        if ((component.setValues[entry.key] ?? 0.0) != entry.value) {\r\n-          isValid = false;\r\n-          addLogEntry('Mismatch in ${component.name}: ${entry.key} set value does not match monitored value', ComponentStatus.warning);\r\n+        final setValue = component.setValues[entry.key] ?? 0.0;\r\n+        final currentValue = entry.value;\r\n+        \r\n+        // Skip validation for certain parameters\r\n+        if (entry.key == 'status') continue;\r\n+        \r\n+        // Check if the current value is within tolerance of set value\r\n+        if (setValue == 0.0) {\r\n+          if (currentValue > tolerance) {\r\n+            isValid = false;\r\n+            addLogEntry('Mismatch in ${component.name}: ${entry.key} should be near zero', ComponentStatus.warning);\r\n+          }\r\n+        } else {\r\n+          final percentDiff = (currentValue - setValue).abs() / setValue;\r\n+          if (percentDiff > tolerance) {\r\n+            isValid = false;\r\n+            addLogEntry('Mismatch in ${component.name}: ${entry.key} is outside tolerance range', ComponentStatus.warning);\r\n+          }\r\n         }\r\n       }\r\n     }\r\n     return isValid;\r\n-  }\r\n+}\r\n \r\n+\r\n   // Stop the system\r\n   void stopSystem() {\r\n     _isSystemRunning = false;\r\n     _activeRecipe = null;\r\n"
                },
                {
                    "date": 1730749016783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,11 +288,68 @@\n   }\r\n \r\n   List<String> getSystemIssues() {\r\n     List<String> issues = [];\r\n-    checkSystemReadiness(); // This will populate the issues list\r\n+\r\n+    // Check Nitrogen Flow\r\n+    final nitrogenGenerator = getComponentByName('Nitrogen Generator');\r\n+    if (nitrogenGenerator != null) {\r\n+      if (!nitrogenGenerator.isActivated) {\r\n+        issues.add('Nitrogen Generator is not activated');\r\n+      } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n+        issues.add('Nitrogen flow rate is too low (current: ${nitrogenGenerator.currentValues['flow_rate']!.toStringAsFixed(1)}, required: ≥10.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check MFC\r\n+    final mfc = getComponentByName('MFC');\r\n+    if (mfc != null) {\r\n+      if (!mfc.isActivated) {\r\n+        issues.add('MFC is not activated');\r\n+      } else if (mfc.currentValues['flow_rate']! != 20.0) {\r\n+        issues.add('MFC flow rate needs adjustment (current: ${mfc.currentValues['flow_rate']!.toStringAsFixed(1)}, required: 20.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pressure\r\n+    final pressureControlSystem = getComponentByName('Pressure Control System');\r\n+    if (pressureControlSystem != null) {\r\n+      if (!pressureControlSystem.isActivated) {\r\n+        issues.add('Pressure Control System is not activated');\r\n+      } else if (pressureControlSystem.currentValues['pressure']! >= 760.0) {\r\n+        issues.add('Pressure is too high (current: ${pressureControlSystem.currentValues['pressure']!.toStringAsFixed(1)}, must be <760.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pump\r\n+    final pump = getComponentByName('Vacuum Pump');\r\n+    if (pump != null) {\r\n+      if (!pump.isActivated) {\r\n+        issues.add('Vacuum Pump is not activated');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Heaters\r\n+    final heaters = ['Precursor Heater 1', 'Precursor Heater 2', 'Frontline Heater', 'Backline Heater'];\r\n+    for (var heaterName in heaters) {\r\n+      final heater = getComponentByName(heaterName);\r\n+      if (heater != null && !heater.isActivated) {\r\n+        issues.add('$heaterName is not activated');\r\n+      }\r\n+    }\r\n+\r\n+    // Check value mismatches\r\n+    for (var component in _componentProvider.components.values) {\r\n+      for (var entry in component.currentValues.entries) {\r\n+        final setValue = component.setValues[entry.key] ?? 0.0;\r\n+        if (setValue != entry.value) {\r\n+          issues.add('${component.name}: ${entry.key} mismatch (current: ${entry.value.toStringAsFixed(1)}, set: ${setValue.toStringAsFixed(1)})');\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n     return issues;\r\n-  }\r\n+}\r\n \r\n   void batchUpdateComponentValues(Map<String, Map<String, double>> updates) {\r\n     updates.forEach((componentName, newStates) {\r\n       final component = _componentProvider.getComponent(componentName);\r\n"
                },
                {
                    "date": 1730749298001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,20 +35,18 @@\n \r\n   // Add a constant for the maximum number of data points per parameter\r\n   static const int MAX_DATA_POINTS_PER_PARAMETER = 1000;\r\n \r\n-\r\n   SystemStateProvider(\r\n-      this._componentProvider,\r\n-      this._recipeProvider,\r\n-      this._alarmProvider,\r\n-      this._systemStateRepository,\r\n-      this._authService,\r\n-      ) {\r\n+    this._componentProvider,\r\n+    this._recipeProvider,\r\n+    this._alarmProvider,\r\n+    this._systemStateRepository,\r\n+    this._authService,\r\n+  ) {\r\n     _initializeComponents();\r\n     _loadSystemLog();\r\n-    _simulationService =\r\n-        AldSystemSimulationService(systemStateProvider: this);\r\n+    _simulationService = AldSystemSimulationService(systemStateProvider: this);\r\n   }\r\n \r\n   // Getters\r\n   Recipe? get activeRecipe => _activeRecipe;\r\n@@ -295,9 +293,10 @@\n     if (nitrogenGenerator != null) {\r\n       if (!nitrogenGenerator.isActivated) {\r\n         issues.add('Nitrogen Generator is not activated');\r\n       } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n-        issues.add('Nitrogen flow rate is too low (current: ${nitrogenGenerator.currentValues['flow_rate']!.toStringAsFixed(1)}, required: ≥10.0)');\r\n+        issues.add(\r\n+            'Nitrogen flow rate is too low (current: ${nitrogenGenerator.currentValues['flow_rate']!.toStringAsFixed(1)}, required: ≥10.0)');\r\n       }\r\n     }\r\n \r\n     // Check MFC\r\n@@ -305,9 +304,10 @@\n     if (mfc != null) {\r\n       if (!mfc.isActivated) {\r\n         issues.add('MFC is not activated');\r\n       } else if (mfc.currentValues['flow_rate']! != 20.0) {\r\n-        issues.add('MFC flow rate needs adjustment (current: ${mfc.currentValues['flow_rate']!.toStringAsFixed(1)}, required: 20.0)');\r\n+        issues.add(\r\n+            'MFC flow rate needs adjustment (current: ${mfc.currentValues['flow_rate']!.toStringAsFixed(1)}, required: 20.0)');\r\n       }\r\n     }\r\n \r\n     // Check Pressure\r\n@@ -315,9 +315,10 @@\n     if (pressureControlSystem != null) {\r\n       if (!pressureControlSystem.isActivated) {\r\n         issues.add('Pressure Control System is not activated');\r\n       } else if (pressureControlSystem.currentValues['pressure']! >= 760.0) {\r\n-        issues.add('Pressure is too high (current: ${pressureControlSystem.currentValues['pressure']!.toStringAsFixed(1)}, must be <760.0)');\r\n+        issues.add(\r\n+            'Pressure is too high (current: ${pressureControlSystem.currentValues['pressure']!.toStringAsFixed(1)}, must be <760.0)');\r\n       }\r\n     }\r\n \r\n     // Check Pump\r\n@@ -328,9 +329,14 @@\n       }\r\n     }\r\n \r\n     // Check Heaters\r\n-    final heaters = ['Precursor Heater 1', 'Precursor Heater 2', 'Frontline Heater', 'Backline Heater'];\r\n+    final heaters = [\r\n+      'Precursor Heater 1',\r\n+      'Precursor Heater 2',\r\n+      'Frontline Heater',\r\n+      'Backline Heater'\r\n+    ];\r\n     for (var heaterName in heaters) {\r\n       final heater = getComponentByName(heaterName);\r\n       if (heater != null && !heater.isActivated) {\r\n         issues.add('$heaterName is not activated');\r\n@@ -341,15 +347,16 @@\n     for (var component in _componentProvider.components.values) {\r\n       for (var entry in component.currentValues.entries) {\r\n         final setValue = component.setValues[entry.key] ?? 0.0;\r\n         if (setValue != entry.value) {\r\n-          issues.add('${component.name}: ${entry.key} mismatch (current: ${entry.value.toStringAsFixed(1)}, set: ${setValue.toStringAsFixed(1)})');\r\n+          issues.add(\r\n+              '${component.name}: ${entry.key} mismatch (current: ${entry.value.toStringAsFixed(1)}, set: ${setValue.toStringAsFixed(1)})');\r\n         }\r\n       }\r\n     }\r\n \r\n     return issues;\r\n-}\r\n+  }\r\n \r\n   void batchUpdateComponentValues(Map<String, Map<String, double>> updates) {\r\n     updates.forEach((componentName, newStates) {\r\n       final component = _componentProvider.getComponent(componentName);\r\n@@ -381,9 +388,10 @@\n     if (mfc != null) {\r\n       if (!mfc.isActivated) {\r\n         isReady = false;\r\n         issues.add('MFC is not activated');\r\n-      } else if (mfc.currentValues['flow_rate']! < 15.0 || mfc.currentValues['flow_rate']! > 25.0) {\r\n+      } else if (mfc.currentValues['flow_rate']! < 15.0 ||\r\n+          mfc.currentValues['flow_rate']! > 25.0) {\r\n         isReady = false;\r\n         issues.add('MFC flow rate is outside acceptable range (15-25 SCCM)');\r\n       }\r\n     }\r\n@@ -393,9 +401,10 @@\n     if (pressureControlSystem != null) {\r\n       if (!pressureControlSystem.isActivated) {\r\n         isReady = false;\r\n         issues.add('Pressure Control System is not activated');\r\n-      } else if (pressureControlSystem.currentValues['pressure']! > 10.0) { // Changed to more reasonable value\r\n+      } else if (pressureControlSystem.currentValues['pressure']! > 10.0) {\r\n+        // Changed to more reasonable value\r\n         isReady = false;\r\n         issues.add('Pressure is too high (must be below 10 Torr)');\r\n       }\r\n     }\r\n@@ -412,9 +421,14 @@\n       issues.add('Vacuum Pump not found');\r\n     }\r\n \r\n     // Check Heaters\r\n-    final heaters = ['Precursor Heater 1', 'Precursor Heater 2', 'Frontline Heater', 'Backline Heater'];\r\n+    final heaters = [\r\n+      'Precursor Heater 1',\r\n+      'Precursor Heater 2',\r\n+      'Frontline Heater',\r\n+      'Backline Heater'\r\n+    ];\r\n     for (var heaterName in heaters) {\r\n       final heater = getComponentByName(heaterName);\r\n       if (heater != null) {\r\n         if (!heater.isActivated) {\r\n@@ -496,9 +510,9 @@\n     final start = now.subtract(Duration(hours: 24));\r\n \r\n     try {\r\n       List<Map<String, dynamic>> historyData =\r\n-      await _systemStateRepository.getComponentHistory(\r\n+          await _systemStateRepository.getComponentHistory(\r\n         userId,\r\n         componentName,\r\n         start,\r\n         now,\r\n@@ -508,10 +522,9 @@\n       if (component != null) {\r\n         // Parse historical data and populate the parameterHistory\r\n         for (var data in historyData.take(MAX_DATA_POINTS_PER_PARAMETER)) {\r\n           final timestamp = (data['timestamp'] as Timestamp).toDate();\r\n-          final currentValues =\r\n-          Map<String, double>.from(data['currentValues']);\r\n+          final currentValues = Map<String, double>.from(data['currentValues']);\r\n \r\n           currentValues.forEach((parameter, value) {\r\n             component.updateCurrentValues({parameter: value});\r\n             _componentProvider.addParameterDataPoint(\r\n@@ -548,36 +561,39 @@\n \r\n   bool validateSetVsMonitoredValues() {\r\n     bool isValid = true;\r\n     final tolerance = 0.1; // 10% tolerance\r\n-    \r\n+\r\n     for (var component in _componentProvider.components.values) {\r\n       for (var entry in component.currentValues.entries) {\r\n         final setValue = component.setValues[entry.key] ?? 0.0;\r\n         final currentValue = entry.value;\r\n-        \r\n+\r\n         // Skip validation for certain parameters\r\n         if (entry.key == 'status') continue;\r\n-        \r\n+\r\n         // Check if the current value is within tolerance of set value\r\n         if (setValue == 0.0) {\r\n           if (currentValue > tolerance) {\r\n             isValid = false;\r\n-            addLogEntry('Mismatch in ${component.name}: ${entry.key} should be near zero', ComponentStatus.warning);\r\n+            addLogEntry(\r\n+                'Mismatch in ${component.name}: ${entry.key} should be near zero',\r\n+                ComponentStatus.warning);\r\n           }\r\n         } else {\r\n           final percentDiff = (currentValue - setValue).abs() / setValue;\r\n           if (percentDiff > tolerance) {\r\n             isValid = false;\r\n-            addLogEntry('Mismatch in ${component.name}: ${entry.key} is outside tolerance range', ComponentStatus.warning);\r\n+            addLogEntry(\r\n+                'Mismatch in ${component.name}: ${entry.key} is outside tolerance range',\r\n+                ComponentStatus.warning);\r\n           }\r\n         }\r\n       }\r\n     }\r\n     return isValid;\r\n-}\r\n+  }\r\n \r\n-\r\n   // Stop the system\r\n   void stopSystem() {\r\n     _isSystemRunning = false;\r\n     _activeRecipe = null;\r\n@@ -618,20 +634,18 @@\n   }\r\n \r\n   // Log a parameter value\r\n   void logParameterValue(String componentName, String parameter, double value) {\r\n-    _componentProvider.addParameterDataPoint(\r\n-        componentName,\r\n-        parameter,\r\n-        DataPoint.reducedPrecision(timestamp: DateTime.now(), value: value)\r\n-    );\r\n+    _componentProvider.addParameterDataPoint(componentName, parameter,\r\n+        DataPoint.reducedPrecision(timestamp: DateTime.now(), value: value));\r\n   }\r\n \r\n   // Run diagnostic on a component\r\n   void runDiagnostic(String componentName) {\r\n     final component = _componentProvider.getComponent(componentName);\r\n     if (component != null) {\r\n-      addLogEntry('Running diagnostic for ${component.name}', ComponentStatus.normal);\r\n+      addLogEntry(\r\n+          'Running diagnostic for ${component.name}', ComponentStatus.normal);\r\n       Future.delayed(const Duration(seconds: 2), () {\r\n         addLogEntry(\r\n             '${component.name} diagnostic completed: All systems nominal',\r\n             ComponentStatus.normal);\r\n@@ -717,17 +731,21 @@\n   }\r\n \r\n   // Check reactor pressure\r\n   bool isReactorPressureNormal() {\r\n-    final pressure =\r\n-        _componentProvider.getComponent('Reaction Chamber')?.currentValues['pressure'] ?? 0.0;\r\n+    final pressure = _componentProvider\r\n+            .getComponent('Reaction Chamber')\r\n+            ?.currentValues['pressure'] ??\r\n+        0.0;\r\n     return pressure >= 0.9 && pressure <= 1.1;\r\n   }\r\n \r\n   // Check reactor temperature\r\n   bool isReactorTemperatureNormal() {\r\n-    final temperature =\r\n-        _componentProvider.getComponent('Reaction Chamber')?.currentValues['temperature'] ?? 0.0;\r\n+    final temperature = _componentProvider\r\n+            .getComponent('Reaction Chamber')\r\n+            ?.currentValues['temperature'] ??\r\n+        0.0;\r\n     return temperature >= 145 && temperature <= 155;\r\n   }\r\n \r\n   // Check precursor temperature\r\n@@ -878,37 +896,35 @@\n     int duration = step.parameters['duration'] as int;\r\n     String valveName = valveType == ValveType.valveA ? 'Valve 1' : 'Valve 2';\r\n \r\n     _componentProvider.addParameterDataPoint(\r\n-        valveName,\r\n-        'status',\r\n-        DataPoint(timestamp: DateTime.now(), value: 1.0)\r\n-    );\r\n-    addLogEntry('$valveName opened for $duration seconds', ComponentStatus.normal);\r\n+        valveName, 'status', DataPoint(timestamp: DateTime.now(), value: 1.0));\r\n+    addLogEntry(\r\n+        '$valveName opened for $duration seconds', ComponentStatus.normal);\r\n \r\n     await Future.delayed(Duration(seconds: duration));\r\n \r\n     _componentProvider.addParameterDataPoint(\r\n-        valveName,\r\n-        'status',\r\n-        DataPoint(timestamp: DateTime.now(), value: 0.0)\r\n-    );\r\n-    addLogEntry('$valveName closed after $duration seconds', ComponentStatus.normal);\r\n+        valveName, 'status', DataPoint(timestamp: DateTime.now(), value: 0.0));\r\n+    addLogEntry(\r\n+        '$valveName closed after $duration seconds', ComponentStatus.normal);\r\n   }\r\n \r\n   // Execute a purge step\r\n   Future<void> _executePurgeStep(RecipeStep step) async {\r\n     int duration = step.parameters['duration'] as int;\r\n \r\n     _componentProvider.updateComponentCurrentValues('Valve 1', {'status': 0.0});\r\n     _componentProvider.updateComponentCurrentValues('Valve 2', {'status': 0.0});\r\n-    _componentProvider.updateComponentCurrentValues('MFC', {'flow_rate': 100.0}); // Assume max flow rate for purge\r\n+    _componentProvider.updateComponentCurrentValues(\r\n+        'MFC', {'flow_rate': 100.0}); // Assume max flow rate for purge\r\n     addLogEntry('Purge started for $duration seconds', ComponentStatus.normal);\r\n \r\n     await Future.delayed(Duration(seconds: duration));\r\n \r\n     _componentProvider.updateComponentCurrentValues('MFC', {'flow_rate': 0.0});\r\n-    addLogEntry('Purge completed after $duration seconds', ComponentStatus.normal);\r\n+    addLogEntry(\r\n+        'Purge completed after $duration seconds', ComponentStatus.normal);\r\n   }\r\n \r\n   // Execute a loop step\r\n   Future<void> _executeLoopStep(RecipeStep step, double? parentTemperature,\r\n@@ -918,12 +934,16 @@\n     double? loopPressure = step.parameters['pressure'] as double?;\r\n \r\n     double effectiveTemperature = loopTemperature ??\r\n         // inheritedTemperature ??\r\n-        _componentProvider.getComponent('Reaction Chamber')!.currentValues['temperature']!;\r\n+        _componentProvider\r\n+            .getComponent('Reaction Chamber')!\r\n+            .currentValues['temperature']!;\r\n     double effectivePressure = loopPressure ??\r\n         // inheritedPressure ??\r\n-        _componentProvider.getComponent('Reaction Chamber')!.currentValues['pressure']!;\r\n+        _componentProvider\r\n+            .getComponent('Reaction Chamber')!\r\n+            .currentValues['pressure']!;\r\n \r\n     for (int i = 0; i < iterations; i++) {\r\n       if (!_isSystemRunning) break;\r\n       addLogEntry('Starting loop iteration ${i + 1} of $iterations',\r\n@@ -937,19 +957,17 @@\n           inheritedPressure: effectivePressure);\r\n     }\r\n   }\r\n \r\n-\r\n-\r\n   // Execute a set parameter step\r\n   Future<void> _executeSetParameterStep(RecipeStep step) async {\r\n     String componentName = step.parameters['component'] as String;\r\n     String parameterName = step.parameters['parameter'] as String;\r\n     double value = step.parameters['value'] as double;\r\n \r\n     if (_componentProvider.getComponent(componentName) != null) {\r\n-      _componentProvider.updateComponentSetValues(\r\n-          componentName, {parameterName: value});\r\n+      _componentProvider\r\n+          .updateComponentSetValues(componentName, {parameterName: value});\r\n       addLogEntry('Set $parameterName of $componentName to $value',\r\n           ComponentStatus.normal);\r\n       await Future.delayed(const Duration(milliseconds: 500));\r\n     } else {\r\n@@ -1032,8 +1050,9 @@\n     _simulationService.stopSimulation();\r\n     super.dispose();\r\n   }\r\n \r\n-  void updateComponentCurrentValues(String componentName, Map<String, double> newStates) {\r\n+  void updateComponentCurrentValues(\r\n+      String componentName, Map<String, double> newStates) {\r\n     _componentProvider.updateComponentCurrentValues(componentName, newStates);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1730750823886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -936,8 +936,10 @@\n     double effectiveTemperature = loopTemperature ??\r\n         // inheritedTemperature ??\r\n         _componentProvider\r\n             .getComponent('Reaction Chamber')!\r\n+\r\n+            \r\n             .currentValues['temperature']!;\r\n     double effectivePressure = loopPressure ??\r\n         // inheritedPressure ??\r\n         _componentProvider\r\n"
                },
                {
                    "date": 1730750939555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1064 @@\n+// lib/providers/system_state_provider.dart\r\n+\r\n+import 'dart:async';\r\n+import 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_copmonent_provider.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import '../../../repositories/system_state_repository.dart';\r\n+import '../../../services/auth_service.dart';\r\n+import '../models/data_point.dart';\r\n+import '../models/recipe.dart';\r\n+import '../models/alarm.dart';\r\n+import '../models/system_component.dart';\r\n+import '../models/system_log_entry.dart';\r\n+import '../models/safety_error.dart';\r\n+import '../services/experiment_planner_simulation_service.dart';\r\n+import 'recipe_provider.dart';\r\n+import 'alarm_provider.dart';\r\n+import 'package:cloud_firestore/cloud_firestore.dart';\r\n+\r\n+class SystemStateProvider with ChangeNotifier {\r\n+  final SystemStateRepository _systemStateRepository;\r\n+  final AuthService _authService;\r\n+  final SystemComponentProvider _componentProvider;\r\n+  Recipe? _activeRecipe;\r\n+  int _currentRecipeStepIndex = 0;\r\n+  Recipe? _selectedRecipe;\r\n+  bool _isSystemRunning = false;\r\n+  final List<SystemLogEntry> _systemLog = [];\r\n+  late AldSystemSimulationService _simulationService;\r\n+  late RecipeProvider _recipeProvider;\r\n+  late AlarmProvider _alarmProvider;\r\n+  Timer? _stateUpdateTimer;\r\n+\r\n+  // Add a constant for the maximum number of log entries to keep\r\n+  static const int MAX_LOG_ENTRIES = 1000;\r\n+\r\n+  // Add a constant for the maximum number of data points per parameter\r\n+  static const int MAX_DATA_POINTS_PER_PARAMETER = 1000;\r\n+\r\n+  SystemStateProvider(\r\n+    this._componentProvider,\r\n+    this._recipeProvider,\r\n+    this._alarmProvider,\r\n+    this._systemStateRepository,\r\n+    this._authService,\r\n+  ) {\r\n+    _initializeComponents();\r\n+    _loadSystemLog();\r\n+    _simulationService = AldSystemSimulationService(systemStateProvider: this);\r\n+  }\r\n+\r\n+  // Getters\r\n+  Recipe? get activeRecipe => _activeRecipe;\r\n+  int get currentRecipeStepIndex => _currentRecipeStepIndex;\r\n+  Recipe? get selectedRecipe => _selectedRecipe;\r\n+  bool get isSystemRunning => _isSystemRunning;\r\n+  List<SystemLogEntry> get systemLog => List.unmodifiable(_systemLog);\r\n+  List<Alarm> get activeAlarms => _alarmProvider.activeAlarms;\r\n+\r\n+  get components => _componentProvider.components;\r\n+\r\n+  // Initialize all system components with their parameters\r\n+  void _initializeComponents() {\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Nitrogen Generator',\r\n+      description: 'Generates nitrogen gas for the system',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'flow_rate': 0.0,\r\n+        'purity': 99.9,\r\n+      },\r\n+      setValues: {\r\n+        'flow_rate': 50.0, // Default setpoint\r\n+        'purity': 99.9,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 30)),\r\n+      minValues: {\r\n+        'flow_rate': 10.0,\r\n+        'purity': 90.0,\r\n+      },\r\n+      maxValues: {\r\n+        'flow_rate': 100.0,\r\n+        'purity': 100.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'MFC',\r\n+      description: 'Mass Flow Controller for precursor gas',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'flow_rate': 50.0,\r\n+        'pressure': 1.0,\r\n+        'percent_correction': 0.0,\r\n+      },\r\n+      setValues: {\r\n+        'flow_rate': 50.0,\r\n+        'pressure': 1.0,\r\n+        'percent_correction': 0.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 45)),\r\n+      minValues: {\r\n+        'flow_rate': 0.0,\r\n+        'pressure': 0.5,\r\n+        'percent_correction': -10.0,\r\n+      },\r\n+      maxValues: {\r\n+        'flow_rate': 100.0,\r\n+        'pressure': 2.0,\r\n+        'percent_correction': 10.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Reaction Chamber',\r\n+      description: 'Main chamber for chemical reactions',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'temperature': 150.0,\r\n+        'pressure': 1.0,\r\n+      },\r\n+      setValues: {\r\n+        'temperature': 150.0,\r\n+        'pressure': 1.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 60)),\r\n+      minValues: {\r\n+        'temperature': 100.0,\r\n+        'pressure': 0.8,\r\n+      },\r\n+      maxValues: {\r\n+        'temperature': 200.0,\r\n+        'pressure': 1.2,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Valve 1',\r\n+      description: 'Valve for precursor gas',\r\n+      isActivated: false,\r\n+      currentValues: {\r\n+        'status': 0.0, // 0: Closed, 1: Open\r\n+      },\r\n+      setValues: {\r\n+        'status': 1.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 20)),\r\n+      minValues: {},\r\n+      maxValues: {},\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Valve 2',\r\n+      description: 'Valve for nitrogen gas',\r\n+      isActivated: false,\r\n+      currentValues: {\r\n+        'status': 0.0,\r\n+      },\r\n+      setValues: {\r\n+        'status': 1.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 25)),\r\n+      minValues: {},\r\n+      maxValues: {},\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Pressure Control System',\r\n+      description: 'Controls the pressure in the reaction chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'pressure': 1.0,\r\n+      },\r\n+      setValues: {\r\n+        'pressure': 1.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 35)),\r\n+      minValues: {\r\n+        'pressure': 0.5,\r\n+      },\r\n+      maxValues: {\r\n+        'pressure': 1.5,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Vacuum Pump',\r\n+      description: 'Pumps out gas from the reaction chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'flow_rate': 0.0,\r\n+        'power': 50.0,\r\n+      },\r\n+      setValues: {\r\n+        'flow_rate': 0.0,\r\n+        'power': 50.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 40)),\r\n+      minValues: {\r\n+        'flow_rate': 0.0,\r\n+        'power': 30.0,\r\n+      },\r\n+      maxValues: {\r\n+        'flow_rate': 100.0,\r\n+        'power': 100.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Precursor Heater 1',\r\n+      description: 'Heats precursor gas before entering the chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      setValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 15)),\r\n+      minValues: {\r\n+        'temperature': 100.0,\r\n+      },\r\n+      maxValues: {\r\n+        'temperature': 200.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Precursor Heater 2',\r\n+      description: 'Heats precursor gas before entering the chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      setValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 18)),\r\n+      minValues: {\r\n+        'temperature': 100.0,\r\n+      },\r\n+      maxValues: {\r\n+        'temperature': 200.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Frontline Heater',\r\n+      description: 'Heats the front of the chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      setValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 22)),\r\n+      minValues: {\r\n+        'temperature': 100.0,\r\n+      },\r\n+      maxValues: {\r\n+        'temperature': 200.0,\r\n+      },\r\n+    ));\r\n+    _componentProvider.addComponent(SystemComponent(\r\n+      name: 'Backline Heater',\r\n+      description: 'Heats the back of the chamber',\r\n+      isActivated: true,\r\n+      currentValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      setValues: {\r\n+        'temperature': 150.0,\r\n+      },\r\n+      lastCheckDate: DateTime.now().subtract(Duration(days: 28)),\r\n+      minValues: {\r\n+        'temperature': 100.0,\r\n+      },\r\n+      maxValues: {\r\n+        'temperature': 200.0,\r\n+      },\r\n+    ));\r\n+  }\r\n+\r\n+  // Load system log from repository\r\n+  Future<void> _loadSystemLog() async {\r\n+    String? userId = _authService.currentUser?.uid;\r\n+    if (userId != null) {\r\n+      final logs = await _systemStateRepository.getSystemLog(userId);\r\n+      _systemLog.addAll(logs.take(MAX_LOG_ENTRIES));\r\n+      if (_systemLog.length > MAX_LOG_ENTRIES) {\r\n+        _systemLog.removeRange(0, _systemLog.length - MAX_LOG_ENTRIES);\r\n+      }\r\n+      notifyListeners();\r\n+    }\r\n+  }\r\n+\r\n+  List<String> getSystemIssues() {\r\n+    List<String> issues = [];\r\n+\r\n+    // Check Nitrogen Flow\r\n+    final nitrogenGenerator = getComponentByName('Nitrogen Generator');\r\n+    if (nitrogenGenerator != null) {\r\n+      if (!nitrogenGenerator.isActivated) {\r\n+        issues.add('Nitrogen Generator is not activated');\r\n+      } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n+        issues.add(\r\n+            'Nitrogen flow rate is too low (current: ${nitrogenGenerator.currentValues['flow_rate']!.toStringAsFixed(1)}, required: ≥10.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check MFC\r\n+    final mfc = getComponentByName('MFC');\r\n+    if (mfc != null) {\r\n+      if (!mfc.isActivated) {\r\n+        issues.add('MFC is not activated');\r\n+      } else if (mfc.currentValues['flow_rate']! != 20.0) {\r\n+        issues.add(\r\n+            'MFC flow rate needs adjustment (current: ${mfc.currentValues['flow_rate']!.toStringAsFixed(1)}, required: 20.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pressure\r\n+    final pressureControlSystem = getComponentByName('Pressure Control System');\r\n+    if (pressureControlSystem != null) {\r\n+      if (!pressureControlSystem.isActivated) {\r\n+        issues.add('Pressure Control System is not activated');\r\n+      } else if (pressureControlSystem.currentValues['pressure']! >= 760.0) {\r\n+        issues.add(\r\n+            'Pressure is too high (current: ${pressureControlSystem.currentValues['pressure']!.toStringAsFixed(1)}, must be <760.0)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pump\r\n+    final pump = getComponentByName('Vacuum Pump');\r\n+    if (pump != null) {\r\n+      if (!pump.isActivated) {\r\n+        issues.add('Vacuum Pump is not activated');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Heaters\r\n+    final heaters = [\r\n+      'Precursor Heater 1',\r\n+      'Precursor Heater 2',\r\n+      'Frontline Heater',\r\n+      'Backline Heater'\r\n+    ];\r\n+    for (var heaterName in heaters) {\r\n+      final heater = getComponentByName(heaterName);\r\n+      if (heater != null && !heater.isActivated) {\r\n+        issues.add('$heaterName is not activated');\r\n+      }\r\n+    }\r\n+\r\n+    // Check value mismatches\r\n+    for (var component in _componentProvider.components.values) {\r\n+      for (var entry in component.currentValues.entries) {\r\n+        final setValue = component.setValues[entry.key] ?? 0.0;\r\n+        if (setValue != entry.value) {\r\n+          issues.add(\r\n+              '${component.name}: ${entry.key} mismatch (current: ${entry.value.toStringAsFixed(1)}, set: ${setValue.toStringAsFixed(1)})');\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    return issues;\r\n+  }\r\n+\r\n+  void batchUpdateComponentValues(Map<String, Map<String, double>> updates) {\r\n+    updates.forEach((componentName, newStates) {\r\n+      final component = _componentProvider.getComponent(componentName);\r\n+      if (component != null) {\r\n+        component.updateCurrentValues(newStates);\r\n+      }\r\n+    });\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  bool checkSystemReadiness() {\r\n+    bool isReady = true;\r\n+    List<String> issues = [];\r\n+\r\n+    // Check Nitrogen Flow\r\n+    final nitrogenGenerator = getComponentByName('Nitrogen Generator');\r\n+    if (nitrogenGenerator != null) {\r\n+      if (!nitrogenGenerator.isActivated) {\r\n+        isReady = false;\r\n+        issues.add('Nitrogen Generator is not activated');\r\n+      } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n+        isReady = false;\r\n+        issues.add('Nitrogen flow rate is too low');\r\n+      }\r\n+    }\r\n+\r\n+    // Check MFC\r\n+    final mfc = getComponentByName('MFC');\r\n+    if (mfc != null) {\r\n+      if (!mfc.isActivated) {\r\n+        isReady = false;\r\n+        issues.add('MFC is not activated');\r\n+      } else if (mfc.currentValues['flow_rate']! < 15.0 ||\r\n+          mfc.currentValues['flow_rate']! > 25.0) {\r\n+        isReady = false;\r\n+        issues.add('MFC flow rate is outside acceptable range (15-25 SCCM)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pressure\r\n+    final pressureControlSystem = getComponentByName('Pressure Control System');\r\n+    if (pressureControlSystem != null) {\r\n+      if (!pressureControlSystem.isActivated) {\r\n+        isReady = false;\r\n+        issues.add('Pressure Control System is not activated');\r\n+      } else if (pressureControlSystem.currentValues['pressure']! > 10.0) {\r\n+        // Changed to more reasonable value\r\n+        isReady = false;\r\n+        issues.add('Pressure is too high (must be below 10 Torr)');\r\n+      }\r\n+    }\r\n+\r\n+    // Check Pump\r\n+    final pump = getComponentByName('Vacuum Pump');\r\n+    if (pump != null) {\r\n+      if (!pump.isActivated) {\r\n+        isReady = false;\r\n+        issues.add('Vacuum Pump is not activated');\r\n+      }\r\n+    } else {\r\n+      isReady = false;\r\n+      issues.add('Vacuum Pump not found');\r\n+    }\r\n+\r\n+    // Check Heaters\r\n+    final heaters = [\r\n+      'Precursor Heater 1',\r\n+      'Precursor Heater 2',\r\n+      'Frontline Heater',\r\n+      'Backline Heater'\r\n+    ];\r\n+    for (var heaterName in heaters) {\r\n+      final heater = getComponentByName(heaterName);\r\n+      if (heater != null) {\r\n+        if (!heater.isActivated) {\r\n+          isReady = false;\r\n+          issues.add('$heaterName is not activated');\r\n+        }\r\n+      } else {\r\n+        isReady = false;\r\n+        issues.add('$heaterName not found');\r\n+      }\r\n+    }\r\n+\r\n+    // Log issues if any\r\n+    if (!isReady) {\r\n+      issues.forEach((issue) => addLogEntry(issue, ComponentStatus.warning));\r\n+    }\r\n+\r\n+    return isReady;\r\n+  }\r\n+\r\n+  // Add a log entry\r\n+  void addLogEntry(String message, ComponentStatus status) {\r\n+    String? userId = _authService.currentUser?.uid;\r\n+    if (userId == null) return;\r\n+\r\n+    SystemLogEntry logEntry = SystemLogEntry(\r\n+      timestamp: DateTime.now(),\r\n+      message: message,\r\n+      severity: status,\r\n+    );\r\n+    _systemLog.add(logEntry);\r\n+    if (_systemLog.length > MAX_LOG_ENTRIES) {\r\n+      _systemLog.removeAt(0);\r\n+    }\r\n+    _systemStateRepository.addLogEntry(userId, logEntry);\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Retrieve a component by name\r\n+  SystemComponent? getComponentByName(String componentName) {\r\n+    return _componentProvider.getComponent(componentName);\r\n+  }\r\n+\r\n+  // Start the simulation\r\n+  void startSimulation() {\r\n+    if (!_isSystemRunning) {\r\n+      _isSystemRunning = true;\r\n+      _simulationService.startSimulation();\r\n+      addLogEntry('Simulation started', ComponentStatus.normal);\r\n+      notifyListeners();\r\n+    }\r\n+  }\r\n+\r\n+  // Stop the simulation\r\n+  void stopSimulation() {\r\n+    if (_isSystemRunning) {\r\n+      _isSystemRunning = false;\r\n+      _simulationService.stopSimulation();\r\n+      addLogEntry('Simulation stopped', ComponentStatus.normal);\r\n+      notifyListeners();\r\n+    }\r\n+  }\r\n+\r\n+  // Toggle simulation state\r\n+  void toggleSimulation() {\r\n+    if (_isSystemRunning) {\r\n+      stopSimulation();\r\n+    } else {\r\n+      startSimulation();\r\n+    }\r\n+  }\r\n+\r\n+  /// Fetch historical data for a specific component and update the `parameterHistory`\r\n+  Future<void> fetchComponentHistory(String componentName) async {\r\n+    String? userId = _authService.currentUser?.uid;\r\n+    if (userId == null) return;\r\n+\r\n+    final now = DateTime.now();\r\n+    final start = now.subtract(Duration(hours: 24));\r\n+\r\n+    try {\r\n+      List<Map<String, dynamic>> historyData =\r\n+          await _systemStateRepository.getComponentHistory(\r\n+        userId,\r\n+        componentName,\r\n+        start,\r\n+        now,\r\n+      );\r\n+\r\n+      final component = _componentProvider.getComponent(componentName);\r\n+      if (component != null) {\r\n+        // Parse historical data and populate the parameterHistory\r\n+        for (var data in historyData.take(MAX_DATA_POINTS_PER_PARAMETER)) {\r\n+          final timestamp = (data['timestamp'] as Timestamp).toDate();\r\n+          final currentValues = Map<String, double>.from(data['currentValues']);\r\n+\r\n+          currentValues.forEach((parameter, value) {\r\n+            component.updateCurrentValues({parameter: value});\r\n+            _componentProvider.addParameterDataPoint(\r\n+              componentName,\r\n+              parameter,\r\n+              DataPoint(timestamp: timestamp, value: value),\r\n+              maxDataPoints: MAX_DATA_POINTS_PER_PARAMETER,\r\n+            );\r\n+          });\r\n+        }\r\n+      }\r\n+    } catch (e) {\r\n+      print(\"Error fetching component history for $componentName: $e\");\r\n+    }\r\n+  }\r\n+\r\n+  // Start the system\r\n+  void startSystem() {\r\n+    if (!_isSystemRunning && checkSystemReadiness()) {\r\n+      _isSystemRunning = true;\r\n+      _simulationService.startSimulation();\r\n+      _startContinuousStateLogging();\r\n+      addLogEntry('System started', ComponentStatus.normal);\r\n+      notifyListeners();\r\n+    } else {\r\n+      _alarmProvider.addAlarm(Alarm(\r\n+        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+        message: 'System not ready to start. Check system readiness.',\r\n+        severity: AlarmSeverity.warning,\r\n+        timestamp: DateTime.now(),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  bool validateSetVsMonitoredValues() {\r\n+    bool isValid = true;\r\n+    final tolerance = 0.1; // 10% tolerance\r\n+\r\n+    for (var component in _componentProvider.components.values) {\r\n+      for (var entry in component.currentValues.entries) {\r\n+        final setValue = component.setValues[entry.key] ?? 0.0;\r\n+        final currentValue = entry.value;\r\n+\r\n+        // Skip validation for certain parameters\r\n+        if (entry.key == 'status') continue;\r\n+\r\n+        // Check if the current value is within tolerance of set value\r\n+        if (setValue == 0.0) {\r\n+          if (currentValue > tolerance) {\r\n+            isValid = false;\r\n+            addLogEntry(\r\n+                'Mismatch in ${component.name}: ${entry.key} should be near zero',\r\n+                ComponentStatus.warning);\r\n+          }\r\n+        } else {\r\n+          final percentDiff = (currentValue - setValue).abs() / setValue;\r\n+          if (percentDiff > tolerance) {\r\n+            isValid = false;\r\n+            addLogEntry(\r\n+                'Mismatch in ${component.name}: ${entry.key} is outside tolerance range',\r\n+                ComponentStatus.warning);\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return isValid;\r\n+  }\r\n+\r\n+  // Stop the system\r\n+  void stopSystem() {\r\n+    _isSystemRunning = false;\r\n+    _activeRecipe = null;\r\n+    _currentRecipeStepIndex = 0;\r\n+    _simulationService.stopSimulation();\r\n+    _stopContinuousStateLogging();\r\n+    _deactivateAllValves();\r\n+    addLogEntry('System stopped', ComponentStatus.normal);\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Start continuous state logging\r\n+  void _startContinuousStateLogging() {\r\n+    _stateUpdateTimer = Timer.periodic(Duration(seconds: 5), (_) {\r\n+      _saveCurrentState();\r\n+    });\r\n+  }\r\n+\r\n+  // Stop continuous state logging\r\n+  void _stopContinuousStateLogging() {\r\n+    _stateUpdateTimer?.cancel();\r\n+    _stateUpdateTimer = null;\r\n+  }\r\n+\r\n+  // Save current state to repository\r\n+  void _saveCurrentState() {\r\n+    String? userId = _authService.currentUser?.uid;\r\n+    if (userId == null) return;\r\n+\r\n+    for (var component in _componentProvider.components.values) {\r\n+      _systemStateRepository.saveComponentState(userId, component);\r\n+    }\r\n+    _systemStateRepository.saveSystemState(userId, {\r\n+      'isRunning': _isSystemRunning,\r\n+      'activeRecipeId': _activeRecipe?.id,\r\n+      'currentRecipeStepIndex': _currentRecipeStepIndex,\r\n+    });\r\n+  }\r\n+\r\n+  // Log a parameter value\r\n+  void logParameterValue(String componentName, String parameter, double value) {\r\n+    _componentProvider.addParameterDataPoint(componentName, parameter,\r\n+        DataPoint.reducedPrecision(timestamp: DateTime.now(), value: value));\r\n+  }\r\n+\r\n+  // Run diagnostic on a component\r\n+  void runDiagnostic(String componentName) {\r\n+    final component = _componentProvider.getComponent(componentName);\r\n+    if (component != null) {\r\n+      addLogEntry(\r\n+          'Running diagnostic for ${component.name}', ComponentStatus.normal);\r\n+      Future.delayed(const Duration(seconds: 2), () {\r\n+        addLogEntry(\r\n+            '${component.name} diagnostic completed: All systems nominal',\r\n+            ComponentStatus.normal);\r\n+        notifyListeners();\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Update providers if needed\r\n+  void updateProviders(\r\n+      RecipeProvider recipeProvider, AlarmProvider alarmProvider) {\r\n+    if (_recipeProvider != recipeProvider) {\r\n+      _recipeProvider = recipeProvider;\r\n+    }\r\n+    if (_alarmProvider != alarmProvider) {\r\n+      _alarmProvider = alarmProvider;\r\n+    }\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Check if system is ready for a recipe\r\n+  bool isSystemReadyForRecipe() {\r\n+    return checkSystemReadiness() && validateSetVsMonitoredValues();\r\n+  }\r\n+\r\n+  // Execute a recipe\r\n+  Future<void> executeRecipe(Recipe recipe) async {\r\n+    print(\"Executing recipe: ${recipe.name}\");\r\n+    if (isSystemReadyForRecipe()) {\r\n+      _activeRecipe = recipe;\r\n+      _currentRecipeStepIndex = 0;\r\n+      _isSystemRunning = true;\r\n+      addLogEntry('Executing recipe: ${recipe.name}', ComponentStatus.normal);\r\n+      _simulationService.startSimulation();\r\n+      notifyListeners();\r\n+      await _executeSteps(recipe.steps);\r\n+      completeRecipe();\r\n+    } else {\r\n+      _alarmProvider.addAlarm(Alarm(\r\n+        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+        message: 'System not ready to start',\r\n+        severity: AlarmSeverity.warning,\r\n+        timestamp: DateTime.now(),\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  // Select a recipe\r\n+  void selectRecipe(String id) {\r\n+    _selectedRecipe = _recipeProvider.getRecipeById(id);\r\n+    if (_selectedRecipe != null) {\r\n+      addLogEntry(\r\n+          'Recipe selected: ${_selectedRecipe!.name}', ComponentStatus.normal);\r\n+    } else {\r\n+      _alarmProvider.addAlarm(Alarm(\r\n+        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+        message: 'Failed to select recipe: Recipe not found',\r\n+        severity: AlarmSeverity.warning,\r\n+        timestamp: DateTime.now(),\r\n+      ));\r\n+    }\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Emergency stop\r\n+  void emergencyStop() {\r\n+    stopSystem();\r\n+    for (var component in _componentProvider.components.values) {\r\n+      if (component.isActivated) {\r\n+        _componentProvider.deactivateComponent(component.name);\r\n+        _systemStateRepository.saveComponentState(\r\n+            _authService.currentUser!.uid, component);\r\n+      }\r\n+    }\r\n+    _alarmProvider.addAlarm(Alarm(\r\n+      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      message: 'Emergency stop activated',\r\n+      severity: AlarmSeverity.critical,\r\n+      timestamp: DateTime.now(),\r\n+    ));\r\n+    addLogEntry('Emergency stop activated', ComponentStatus.error);\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Check reactor pressure\r\n+  bool isReactorPressureNormal() {\r\n+    final pressure = _componentProvider\r\n+            .getComponent('Reaction Chamber')\r\n+            ?.currentValues['pressure'] ??\r\n+        0.0;\r\n+    return pressure >= 0.9 && pressure <= 1.1;\r\n+  }\r\n+\r\n+  // Check reactor temperature\r\n+  bool isReactorTemperatureNormal() {\r\n+    final temperature = _componentProvider\r\n+            .getComponent('Reaction Chamber')\r\n+            ?.currentValues['temperature'] ??\r\n+        0.0;\r\n+    return temperature >= 145 && temperature <= 155;\r\n+  }\r\n+\r\n+  // Check precursor temperature\r\n+  bool isPrecursorTemperatureNormal(String precursor) {\r\n+    final component = _componentProvider.getComponent(precursor);\r\n+    if (component != null) {\r\n+      final temperature = component.currentValues['temperature'] ?? 0.0;\r\n+      return temperature >= 28 && temperature <= 32;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  // Increment recipe step index\r\n+  void incrementRecipeStepIndex() {\r\n+    if (_activeRecipe != null &&\r\n+        _currentRecipeStepIndex < _activeRecipe!.steps.length - 1) {\r\n+      _currentRecipeStepIndex++;\r\n+      notifyListeners();\r\n+    }\r\n+  }\r\n+\r\n+  // Complete the recipe\r\n+  void completeRecipe() {\r\n+    addLogEntry(\r\n+        'Recipe completed: ${_activeRecipe?.name}', ComponentStatus.normal);\r\n+    _activeRecipe = null;\r\n+    _currentRecipeStepIndex = 0;\r\n+    _isSystemRunning = false;\r\n+    _simulationService.stopSimulation();\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Trigger safety alert\r\n+  void triggerSafetyAlert(SafetyError error) {\r\n+    _alarmProvider.addAlarm(Alarm(\r\n+      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      message: error.description,\r\n+      severity: _mapSeverityToAlarmSeverity(error.severity),\r\n+      timestamp: DateTime.now(),\r\n+    ));\r\n+    addLogEntry('Safety Alert: ${error.description}',\r\n+        _mapSeverityToComponentStatus(error.severity));\r\n+  }\r\n+\r\n+  // Map safety severity to alarm severity\r\n+  AlarmSeverity _mapSeverityToAlarmSeverity(SafetyErrorSeverity severity) {\r\n+    switch (severity) {\r\n+      case SafetyErrorSeverity.warning:\r\n+        return AlarmSeverity.warning;\r\n+      case SafetyErrorSeverity.critical:\r\n+        return AlarmSeverity.critical;\r\n+      default:\r\n+        return AlarmSeverity.info;\r\n+    }\r\n+  }\r\n+\r\n+  // Map safety severity to component status\r\n+  ComponentStatus _mapSeverityToComponentStatus(SafetyErrorSeverity severity) {\r\n+    switch (severity) {\r\n+      case SafetyErrorSeverity.warning:\r\n+        return ComponentStatus.warning;\r\n+      case SafetyErrorSeverity.critical:\r\n+        return ComponentStatus.error;\r\n+      default:\r\n+        return ComponentStatus.normal;\r\n+    }\r\n+  }\r\n+\r\n+  // Get all recipes\r\n+  List<Recipe> getAllRecipes() {\r\n+    return _recipeProvider.recipes;\r\n+  }\r\n+\r\n+  // Refresh recipes\r\n+  void refreshRecipes() {\r\n+    _recipeProvider.loadRecipes();\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Execute multiple steps\r\n+  Future<void> _executeSteps(List<RecipeStep> steps,\r\n+      {double? inheritedTemperature, double? inheritedPressure}) async {\r\n+    for (var step in steps) {\r\n+      if (!_isSystemRunning) break;\r\n+      await _executeStep(step,\r\n+          inheritedTemperature: inheritedTemperature,\r\n+          inheritedPressure: inheritedPressure);\r\n+      incrementRecipeStepIndex();\r\n+    }\r\n+  }\r\n+\r\n+  // Execute a single step\r\n+  Future<void> _executeStep(RecipeStep step,\r\n+      {double? inheritedTemperature, double? inheritedPressure}) async {\r\n+    addLogEntry(\r\n+        'Executing step: ${_getStepDescription(step)}', ComponentStatus.normal);\r\n+    switch (step.type) {\r\n+      case StepType.valve:\r\n+        await _executeValveStep(step);\r\n+        break;\r\n+      case StepType.purge:\r\n+        await _executePurgeStep(step);\r\n+        break;\r\n+      case StepType.loop:\r\n+        await _executeLoopStep(step, inheritedTemperature, inheritedPressure);\r\n+        break;\r\n+      case StepType.setParameter:\r\n+        await _executeSetParameterStep(step);\r\n+        break;\r\n+    }\r\n+  }\r\n+\r\n+  // Deactivate all valves\r\n+  void _deactivateAllValves() {\r\n+    _componentProvider.components.keys\r\n+        .where((name) => name.toLowerCase().contains('valve'))\r\n+        .forEach((valveName) {\r\n+      _componentProvider.deactivateComponent(valveName);\r\n+      addLogEntry('$valveName deactivated', ComponentStatus.normal);\r\n+    });\r\n+  }\r\n+\r\n+  // Activate a component\r\n+  void _activateComponent(String componentName) {\r\n+    _componentProvider.activateComponent(componentName);\r\n+    addLogEntry('$componentName activated', ComponentStatus.normal);\r\n+  }\r\n+\r\n+  // Get step description\r\n+  String _getStepDescription(RecipeStep step) {\r\n+    switch (step.type) {\r\n+      case StepType.valve:\r\n+        return 'Open ${step.parameters['valveType']} for ${step.parameters['duration']} seconds';\r\n+      case StepType.purge:\r\n+        return 'Purge for ${step.parameters['duration']} seconds';\r\n+      case StepType.loop:\r\n+        return 'Loop ${step.parameters['iterations']} times';\r\n+      case StepType.setParameter:\r\n+        return 'Set ${step.parameters['parameter']} of ${step.parameters['component']} to ${step.parameters['value']}';\r\n+      default:\r\n+        return 'Unknown step type';\r\n+    }\r\n+  }\r\n+\r\n+  // Execute a valve step\r\n+  Future<void> _executeValveStep(RecipeStep step) async {\r\n+    ValveType valveType = step.parameters['valveType'] as ValveType;\r\n+    int duration = step.parameters['duration'] as int;\r\n+    String valveName = valveType == ValveType.valveA ? 'Valve 1' : 'Valve 2';\r\n+\r\n+    _componentProvider.addParameterDataPoint(\r\n+        valveName, 'status', DataPoint(timestamp: DateTime.now(), value: 1.0));\r\n+    addLogEntry(\r\n+        '$valveName opened for $duration seconds', ComponentStatus.normal);\r\n+\r\n+    await Future.delayed(Duration(seconds: duration));\r\n+\r\n+    _componentProvider.addParameterDataPoint(\r\n+        valveName, 'status', DataPoint(timestamp: DateTime.now(), value: 0.0));\r\n+    addLogEntry(\r\n+        '$valveName closed after $duration seconds', ComponentStatus.normal);\r\n+  }\r\n+\r\n+  // Execute a purge step\r\n+  Future<void> _executePurgeStep(RecipeStep step) async {\r\n+    int duration = step.parameters['duration'] as int;\r\n+\r\n+    _componentProvider.updateComponentCurrentValues('Valve 1', {'status': 0.0});\r\n+    _componentProvider.updateComponentCurrentValues('Valve 2', {'status': 0.0});\r\n+    _componentProvider.updateComponentCurrentValues(\r\n+        'MFC', {'flow_rate': 100.0}); // Assume max flow rate for purge\r\n+    addLogEntry('Purge started for $duration seconds', ComponentStatus.normal);\r\n+\r\n+    await Future.delayed(Duration(seconds: duration));\r\n+\r\n+    _componentProvider.updateComponentCurrentValues('MFC', {'flow_rate': 0.0});\r\n+    addLogEntry(\r\n+        'Purge completed after $duration seconds', ComponentStatus.normal);\r\n+  }\r\n+\r\n+  // Execute a loop step\r\n+  Future<void> _executeLoopStep(RecipeStep step, double? parentTemperature,\r\n+      double? parentPressure) async {\r\n+    int iterations = step.parameters['iterations'] as int;\r\n+\r\n+    // Fix the type casting by safely converting to double\r\n+    double? loopTemperature = step.parameters['temperature'] != null\r\n+        ? (step.parameters['temperature'] as num).toDouble()\r\n+        : null;\r\n+\r\n+    double? loopPressure = step.parameters['pressure'] != null\r\n+        ? (step.parameters['pressure'] as num).toDouble()\r\n+        : null;\r\n+\r\n+    double effectiveTemperature = loopTemperature ??\r\n+        _componentProvider\r\n+            .getComponent('Reaction Chamber')!\r\n+            .currentValues['temperature']!;\r\n+\r\n+    double effectivePressure = loopPressure ??\r\n+        _componentProvider\r\n+            .getComponent('Reaction Chamber')!\r\n+            .currentValues['pressure']!;\r\n+\r\n+    for (int i = 0; i < iterations; i++) {\r\n+      if (!_isSystemRunning) break;\r\n+      addLogEntry('Starting loop iteration ${i + 1} of $iterations',\r\n+          ComponentStatus.normal);\r\n+\r\n+      await _setReactionChamberParameters(\r\n+          effectiveTemperature, effectivePressure);\r\n+\r\n+      await _executeSteps(step.subSteps ?? [],\r\n+          inheritedTemperature: effectiveTemperature,\r\n+          inheritedPressure: effectivePressure);\r\n+    }\r\n+  }\r\n+\r\n+  // Execute a set parameter step\r\n+  Future<void> _executeSetParameterStep(RecipeStep step) async {\r\n+    String componentName = step.parameters['component'] as String;\r\n+    String parameterName = step.parameters['parameter'] as String;\r\n+    double value = step.parameters['value'] as double;\r\n+\r\n+    if (_componentProvider.getComponent(componentName) != null) {\r\n+      _componentProvider\r\n+          .updateComponentSetValues(componentName, {parameterName: value});\r\n+      addLogEntry('Set $parameterName of $componentName to $value',\r\n+          ComponentStatus.normal);\r\n+      await Future.delayed(const Duration(milliseconds: 500));\r\n+    } else {\r\n+      addAlarm('Unknown component: $componentName', AlarmSeverity.warning);\r\n+    }\r\n+  }\r\n+\r\n+  // Set reaction chamber parameters\r\n+  Future<void> _setReactionChamberParameters(\r\n+      double temperature, double pressure) async {\r\n+    _componentProvider.updateComponentSetValues('Reaction Chamber', {\r\n+      'temperature': temperature,\r\n+      'pressure': pressure,\r\n+    });\r\n+    addLogEntry(\r\n+        'Setting chamber temperature to $temperature°C and pressure to $pressure atm',\r\n+        ComponentStatus.normal);\r\n+\r\n+    await Future.delayed(const Duration(seconds: 5));\r\n+\r\n+    _componentProvider.updateComponentCurrentValues('Reaction Chamber', {\r\n+      'temperature': temperature,\r\n+      'pressure': pressure,\r\n+    });\r\n+    addLogEntry('Chamber reached target temperature and pressure',\r\n+        ComponentStatus.normal);\r\n+  }\r\n+\r\n+  // Add an alarm\r\n+  void addAlarm(String message, AlarmSeverity severity) async {\r\n+    final newAlarm = Alarm(\r\n+      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n+      message: message,\r\n+      severity: severity,\r\n+      timestamp: DateTime.now(),\r\n+    );\r\n+\r\n+    await _alarmProvider.addAlarm(newAlarm);\r\n+\r\n+    // Log the alarm creation\r\n+    addLogEntry('New alarm: ${newAlarm.message}', ComponentStatus.warning);\r\n+\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Acknowledge an alarm\r\n+  void acknowledgeAlarm(String alarmId) async {\r\n+    await _alarmProvider.acknowledgeAlarm(alarmId);\r\n+\r\n+    // Log the alarm acknowledgement\r\n+    addLogEntry('Alarm acknowledged: $alarmId', ComponentStatus.normal);\r\n+\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Clear an alarm\r\n+  void clearAlarm(String alarmId) async {\r\n+    await _alarmProvider.clearAlarm(alarmId);\r\n+\r\n+    // Log the alarm clearance\r\n+    addLogEntry('Alarm cleared: $alarmId', ComponentStatus.normal);\r\n+\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Clear all acknowledged alarms\r\n+  void clearAllAcknowledgedAlarms() async {\r\n+    await _alarmProvider.clearAllAcknowledgedAlarms();\r\n+\r\n+    // Log the action\r\n+    addLogEntry('All acknowledged alarms cleared', ComponentStatus.normal);\r\n+\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  // Dispose resources\r\n+  @override\r\n+  void dispose() {\r\n+    _stopContinuousStateLogging();\r\n+    _simulationService.stopSimulation();\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  void updateComponentCurrentValues(\r\n+      String componentName, Map<String, double> newStates) {\r\n+    _componentProvider.updateComponentCurrentValues(componentName, newStates);\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1730748900277,
            "name": "Commit-0",
            "content": "// lib/providers/system_state_provider.dart\r\n\r\nimport 'dart:async';\r\nimport 'package:experiment_planner/modules/system_operation_also_main_module/providers/system_copmonent_provider.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport '../../../repositories/system_state_repository.dart';\r\nimport '../../../services/auth_service.dart';\r\nimport '../models/data_point.dart';\r\nimport '../models/recipe.dart';\r\nimport '../models/alarm.dart';\r\nimport '../models/system_component.dart';\r\nimport '../models/system_log_entry.dart';\r\nimport '../models/safety_error.dart';\r\nimport '../services/experiment_planner_simulation_service.dart';\r\nimport 'recipe_provider.dart';\r\nimport 'alarm_provider.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\n\r\nclass SystemStateProvider with ChangeNotifier {\r\n  final SystemStateRepository _systemStateRepository;\r\n  final AuthService _authService;\r\n  final SystemComponentProvider _componentProvider;\r\n  Recipe? _activeRecipe;\r\n  int _currentRecipeStepIndex = 0;\r\n  Recipe? _selectedRecipe;\r\n  bool _isSystemRunning = false;\r\n  final List<SystemLogEntry> _systemLog = [];\r\n  late AldSystemSimulationService _simulationService;\r\n  late RecipeProvider _recipeProvider;\r\n  late AlarmProvider _alarmProvider;\r\n  Timer? _stateUpdateTimer;\r\n\r\n  // Add a constant for the maximum number of log entries to keep\r\n  static const int MAX_LOG_ENTRIES = 1000;\r\n\r\n  // Add a constant for the maximum number of data points per parameter\r\n  static const int MAX_DATA_POINTS_PER_PARAMETER = 1000;\r\n\r\n\r\n  SystemStateProvider(\r\n      this._componentProvider,\r\n      this._recipeProvider,\r\n      this._alarmProvider,\r\n      this._systemStateRepository,\r\n      this._authService,\r\n      ) {\r\n    _initializeComponents();\r\n    _loadSystemLog();\r\n    _simulationService =\r\n        AldSystemSimulationService(systemStateProvider: this);\r\n  }\r\n\r\n  // Getters\r\n  Recipe? get activeRecipe => _activeRecipe;\r\n  int get currentRecipeStepIndex => _currentRecipeStepIndex;\r\n  Recipe? get selectedRecipe => _selectedRecipe;\r\n  bool get isSystemRunning => _isSystemRunning;\r\n  List<SystemLogEntry> get systemLog => List.unmodifiable(_systemLog);\r\n  List<Alarm> get activeAlarms => _alarmProvider.activeAlarms;\r\n\r\n  get components => _componentProvider.components;\r\n\r\n  // Initialize all system components with their parameters\r\n  void _initializeComponents() {\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Nitrogen Generator',\r\n      description: 'Generates nitrogen gas for the system',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'flow_rate': 0.0,\r\n        'purity': 99.9,\r\n      },\r\n      setValues: {\r\n        'flow_rate': 50.0, // Default setpoint\r\n        'purity': 99.9,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 30)),\r\n      minValues: {\r\n        'flow_rate': 10.0,\r\n        'purity': 90.0,\r\n      },\r\n      maxValues: {\r\n        'flow_rate': 100.0,\r\n        'purity': 100.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'MFC',\r\n      description: 'Mass Flow Controller for precursor gas',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'flow_rate': 50.0,\r\n        'pressure': 1.0,\r\n        'percent_correction': 0.0,\r\n      },\r\n      setValues: {\r\n        'flow_rate': 50.0,\r\n        'pressure': 1.0,\r\n        'percent_correction': 0.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 45)),\r\n      minValues: {\r\n        'flow_rate': 0.0,\r\n        'pressure': 0.5,\r\n        'percent_correction': -10.0,\r\n      },\r\n      maxValues: {\r\n        'flow_rate': 100.0,\r\n        'pressure': 2.0,\r\n        'percent_correction': 10.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Reaction Chamber',\r\n      description: 'Main chamber for chemical reactions',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'temperature': 150.0,\r\n        'pressure': 1.0,\r\n      },\r\n      setValues: {\r\n        'temperature': 150.0,\r\n        'pressure': 1.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 60)),\r\n      minValues: {\r\n        'temperature': 100.0,\r\n        'pressure': 0.8,\r\n      },\r\n      maxValues: {\r\n        'temperature': 200.0,\r\n        'pressure': 1.2,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Valve 1',\r\n      description: 'Valve for precursor gas',\r\n      isActivated: false,\r\n      currentValues: {\r\n        'status': 0.0, // 0: Closed, 1: Open\r\n      },\r\n      setValues: {\r\n        'status': 1.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 20)),\r\n      minValues: {},\r\n      maxValues: {},\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Valve 2',\r\n      description: 'Valve for nitrogen gas',\r\n      isActivated: false,\r\n      currentValues: {\r\n        'status': 0.0,\r\n      },\r\n      setValues: {\r\n        'status': 1.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 25)),\r\n      minValues: {},\r\n      maxValues: {},\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Pressure Control System',\r\n      description: 'Controls the pressure in the reaction chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'pressure': 1.0,\r\n      },\r\n      setValues: {\r\n        'pressure': 1.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 35)),\r\n      minValues: {\r\n        'pressure': 0.5,\r\n      },\r\n      maxValues: {\r\n        'pressure': 1.5,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Vacuum Pump',\r\n      description: 'Pumps out gas from the reaction chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'flow_rate': 0.0,\r\n        'power': 50.0,\r\n      },\r\n      setValues: {\r\n        'flow_rate': 0.0,\r\n        'power': 50.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 40)),\r\n      minValues: {\r\n        'flow_rate': 0.0,\r\n        'power': 30.0,\r\n      },\r\n      maxValues: {\r\n        'flow_rate': 100.0,\r\n        'power': 100.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Precursor Heater 1',\r\n      description: 'Heats precursor gas before entering the chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      setValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 15)),\r\n      minValues: {\r\n        'temperature': 100.0,\r\n      },\r\n      maxValues: {\r\n        'temperature': 200.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Precursor Heater 2',\r\n      description: 'Heats precursor gas before entering the chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      setValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 18)),\r\n      minValues: {\r\n        'temperature': 100.0,\r\n      },\r\n      maxValues: {\r\n        'temperature': 200.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Frontline Heater',\r\n      description: 'Heats the front of the chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      setValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 22)),\r\n      minValues: {\r\n        'temperature': 100.0,\r\n      },\r\n      maxValues: {\r\n        'temperature': 200.0,\r\n      },\r\n    ));\r\n    _componentProvider.addComponent(SystemComponent(\r\n      name: 'Backline Heater',\r\n      description: 'Heats the back of the chamber',\r\n      isActivated: true,\r\n      currentValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      setValues: {\r\n        'temperature': 150.0,\r\n      },\r\n      lastCheckDate: DateTime.now().subtract(Duration(days: 28)),\r\n      minValues: {\r\n        'temperature': 100.0,\r\n      },\r\n      maxValues: {\r\n        'temperature': 200.0,\r\n      },\r\n    ));\r\n  }\r\n\r\n  // Load system log from repository\r\n  Future<void> _loadSystemLog() async {\r\n    String? userId = _authService.currentUser?.uid;\r\n    if (userId != null) {\r\n      final logs = await _systemStateRepository.getSystemLog(userId);\r\n      _systemLog.addAll(logs.take(MAX_LOG_ENTRIES));\r\n      if (_systemLog.length > MAX_LOG_ENTRIES) {\r\n        _systemLog.removeRange(0, _systemLog.length - MAX_LOG_ENTRIES);\r\n      }\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  List<String> getSystemIssues() {\r\n    List<String> issues = [];\r\n    checkSystemReadiness(); // This will populate the issues list\r\n    return issues;\r\n  }\r\n\r\n  void batchUpdateComponentValues(Map<String, Map<String, double>> updates) {\r\n    updates.forEach((componentName, newStates) {\r\n      final component = _componentProvider.getComponent(componentName);\r\n      if (component != null) {\r\n        component.updateCurrentValues(newStates);\r\n      }\r\n    });\r\n    notifyListeners();\r\n  }\r\n\r\n  bool checkSystemReadiness() {\r\n    bool isReady = true;\r\n    List<String> issues = [];\r\n\r\n    // Check Nitrogen Flow\r\n    final nitrogenGenerator = getComponentByName('Nitrogen Generator');\r\n    if (nitrogenGenerator != null) {\r\n      if (!nitrogenGenerator.isActivated) {\r\n        isReady = false;\r\n        issues.add('Nitrogen Generator is not activated');\r\n      } else if (nitrogenGenerator.currentValues['flow_rate']! < 10.0) {\r\n        isReady = false;\r\n        issues.add('Nitrogen flow rate is too low');\r\n      }\r\n    } else {\r\n      isReady = false;\r\n      issues.add('Nitrogen Generator not found');\r\n    }\r\n\r\n    // Check MFC\r\n    final mfc = getComponentByName('MFC');\r\n    if (mfc != null) {\r\n      if (!mfc.isActivated) {\r\n        isReady = false;\r\n        issues.add('MFC is not activated');\r\n      } else if (mfc.currentValues['flow_rate']! != 20.0) {\r\n        isReady = false;\r\n        issues.add('MFC flow rate is not set to 20 SCCM');\r\n      }\r\n    } else {\r\n      isReady = false;\r\n      issues.add('MFC not found');\r\n    }\r\n\r\n    // Check Pressure\r\n    final pressureControlSystem = getComponentByName('Pressure Control System');\r\n    if (pressureControlSystem != null) {\r\n      if (!pressureControlSystem.isActivated) {\r\n        isReady = false;\r\n        issues.add('Pressure Control System is not activated');\r\n      } else if (pressureControlSystem.currentValues['pressure']! >= 760.0) {\r\n        isReady = false;\r\n        issues.add('Pressure is not below 760 Torr');\r\n      }\r\n    } else {\r\n      isReady = false;\r\n      issues.add('Pressure Control System not found');\r\n    }\r\n\r\n    // Check Pump\r\n    final pump = getComponentByName('Vacuum Pump');\r\n    if (pump != null) {\r\n      if (!pump.isActivated) {\r\n        isReady = false;\r\n        issues.add('Vacuum Pump is not activated');\r\n      }\r\n    } else {\r\n      isReady = false;\r\n      issues.add('Vacuum Pump not found');\r\n    }\r\n\r\n    // Check Heaters\r\n    final heaters = ['Precursor Heater 1', 'Precursor Heater 2', 'Frontline Heater', 'Backline Heater'];\r\n    for (var heaterName in heaters) {\r\n      final heater = getComponentByName(heaterName);\r\n      if (heater != null) {\r\n        if (!heater.isActivated) {\r\n          isReady = false;\r\n          issues.add('$heaterName is not activated');\r\n        }\r\n      } else {\r\n        isReady = false;\r\n        issues.add('$heaterName not found');\r\n      }\r\n    }\r\n\r\n    // Log issues if any\r\n    if (!isReady) {\r\n      issues.forEach((issue) => addLogEntry(issue, ComponentStatus.warning));\r\n    }\r\n\r\n    return isReady;\r\n  }\r\n\r\n  // Add a log entry\r\n  void addLogEntry(String message, ComponentStatus status) {\r\n    String? userId = _authService.currentUser?.uid;\r\n    if (userId == null) return;\r\n\r\n    SystemLogEntry logEntry = SystemLogEntry(\r\n      timestamp: DateTime.now(),\r\n      message: message,\r\n      severity: status,\r\n    );\r\n    _systemLog.add(logEntry);\r\n    if (_systemLog.length > MAX_LOG_ENTRIES) {\r\n      _systemLog.removeAt(0);\r\n    }\r\n    _systemStateRepository.addLogEntry(userId, logEntry);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Retrieve a component by name\r\n  SystemComponent? getComponentByName(String componentName) {\r\n    return _componentProvider.getComponent(componentName);\r\n  }\r\n\r\n  // Start the simulation\r\n  void startSimulation() {\r\n    if (!_isSystemRunning) {\r\n      _isSystemRunning = true;\r\n      _simulationService.startSimulation();\r\n      addLogEntry('Simulation started', ComponentStatus.normal);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  // Stop the simulation\r\n  void stopSimulation() {\r\n    if (_isSystemRunning) {\r\n      _isSystemRunning = false;\r\n      _simulationService.stopSimulation();\r\n      addLogEntry('Simulation stopped', ComponentStatus.normal);\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  // Toggle simulation state\r\n  void toggleSimulation() {\r\n    if (_isSystemRunning) {\r\n      stopSimulation();\r\n    } else {\r\n      startSimulation();\r\n    }\r\n  }\r\n\r\n  /// Fetch historical data for a specific component and update the `parameterHistory`\r\n  Future<void> fetchComponentHistory(String componentName) async {\r\n    String? userId = _authService.currentUser?.uid;\r\n    if (userId == null) return;\r\n\r\n    final now = DateTime.now();\r\n    final start = now.subtract(Duration(hours: 24));\r\n\r\n    try {\r\n      List<Map<String, dynamic>> historyData =\r\n      await _systemStateRepository.getComponentHistory(\r\n        userId,\r\n        componentName,\r\n        start,\r\n        now,\r\n      );\r\n\r\n      final component = _componentProvider.getComponent(componentName);\r\n      if (component != null) {\r\n        // Parse historical data and populate the parameterHistory\r\n        for (var data in historyData.take(MAX_DATA_POINTS_PER_PARAMETER)) {\r\n          final timestamp = (data['timestamp'] as Timestamp).toDate();\r\n          final currentValues =\r\n          Map<String, double>.from(data['currentValues']);\r\n\r\n          currentValues.forEach((parameter, value) {\r\n            component.updateCurrentValues({parameter: value});\r\n            _componentProvider.addParameterDataPoint(\r\n              componentName,\r\n              parameter,\r\n              DataPoint(timestamp: timestamp, value: value),\r\n              maxDataPoints: MAX_DATA_POINTS_PER_PARAMETER,\r\n            );\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      print(\"Error fetching component history for $componentName: $e\");\r\n    }\r\n  }\r\n\r\n  // Start the system\r\n  void startSystem() {\r\n    if (!_isSystemRunning && checkSystemReadiness()) {\r\n      _isSystemRunning = true;\r\n      _simulationService.startSimulation();\r\n      _startContinuousStateLogging();\r\n      addLogEntry('System started', ComponentStatus.normal);\r\n      notifyListeners();\r\n    } else {\r\n      _alarmProvider.addAlarm(Alarm(\r\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n        message: 'System not ready to start. Check system readiness.',\r\n        severity: AlarmSeverity.warning,\r\n        timestamp: DateTime.now(),\r\n      ));\r\n    }\r\n  }\r\n\r\n  bool validateSetVsMonitoredValues() {\r\n    bool isValid = true;\r\n    for (var component in _componentProvider.components.values) {\r\n      for (var entry in component.currentValues.entries) {\r\n        if ((component.setValues[entry.key] ?? 0.0) != entry.value) {\r\n          isValid = false;\r\n          addLogEntry('Mismatch in ${component.name}: ${entry.key} set value does not match monitored value', ComponentStatus.warning);\r\n        }\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n  // Stop the system\r\n  void stopSystem() {\r\n    _isSystemRunning = false;\r\n    _activeRecipe = null;\r\n    _currentRecipeStepIndex = 0;\r\n    _simulationService.stopSimulation();\r\n    _stopContinuousStateLogging();\r\n    _deactivateAllValves();\r\n    addLogEntry('System stopped', ComponentStatus.normal);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Start continuous state logging\r\n  void _startContinuousStateLogging() {\r\n    _stateUpdateTimer = Timer.periodic(Duration(seconds: 5), (_) {\r\n      _saveCurrentState();\r\n    });\r\n  }\r\n\r\n  // Stop continuous state logging\r\n  void _stopContinuousStateLogging() {\r\n    _stateUpdateTimer?.cancel();\r\n    _stateUpdateTimer = null;\r\n  }\r\n\r\n  // Save current state to repository\r\n  void _saveCurrentState() {\r\n    String? userId = _authService.currentUser?.uid;\r\n    if (userId == null) return;\r\n\r\n    for (var component in _componentProvider.components.values) {\r\n      _systemStateRepository.saveComponentState(userId, component);\r\n    }\r\n    _systemStateRepository.saveSystemState(userId, {\r\n      'isRunning': _isSystemRunning,\r\n      'activeRecipeId': _activeRecipe?.id,\r\n      'currentRecipeStepIndex': _currentRecipeStepIndex,\r\n    });\r\n  }\r\n\r\n  // Log a parameter value\r\n  void logParameterValue(String componentName, String parameter, double value) {\r\n    _componentProvider.addParameterDataPoint(\r\n        componentName,\r\n        parameter,\r\n        DataPoint.reducedPrecision(timestamp: DateTime.now(), value: value)\r\n    );\r\n  }\r\n\r\n  // Run diagnostic on a component\r\n  void runDiagnostic(String componentName) {\r\n    final component = _componentProvider.getComponent(componentName);\r\n    if (component != null) {\r\n      addLogEntry('Running diagnostic for ${component.name}', ComponentStatus.normal);\r\n      Future.delayed(const Duration(seconds: 2), () {\r\n        addLogEntry(\r\n            '${component.name} diagnostic completed: All systems nominal',\r\n            ComponentStatus.normal);\r\n        notifyListeners();\r\n      });\r\n    }\r\n  }\r\n\r\n  // Update providers if needed\r\n  void updateProviders(\r\n      RecipeProvider recipeProvider, AlarmProvider alarmProvider) {\r\n    if (_recipeProvider != recipeProvider) {\r\n      _recipeProvider = recipeProvider;\r\n    }\r\n    if (_alarmProvider != alarmProvider) {\r\n      _alarmProvider = alarmProvider;\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  // Check if system is ready for a recipe\r\n  bool isSystemReadyForRecipe() {\r\n    return checkSystemReadiness() && validateSetVsMonitoredValues();\r\n  }\r\n\r\n  // Execute a recipe\r\n  Future<void> executeRecipe(Recipe recipe) async {\r\n    print(\"Executing recipe: ${recipe.name}\");\r\n    if (isSystemReadyForRecipe()) {\r\n      _activeRecipe = recipe;\r\n      _currentRecipeStepIndex = 0;\r\n      _isSystemRunning = true;\r\n      addLogEntry('Executing recipe: ${recipe.name}', ComponentStatus.normal);\r\n      _simulationService.startSimulation();\r\n      notifyListeners();\r\n      await _executeSteps(recipe.steps);\r\n      completeRecipe();\r\n    } else {\r\n      _alarmProvider.addAlarm(Alarm(\r\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n        message: 'System not ready to start',\r\n        severity: AlarmSeverity.warning,\r\n        timestamp: DateTime.now(),\r\n      ));\r\n    }\r\n  }\r\n\r\n  // Select a recipe\r\n  void selectRecipe(String id) {\r\n    _selectedRecipe = _recipeProvider.getRecipeById(id);\r\n    if (_selectedRecipe != null) {\r\n      addLogEntry(\r\n          'Recipe selected: ${_selectedRecipe!.name}', ComponentStatus.normal);\r\n    } else {\r\n      _alarmProvider.addAlarm(Alarm(\r\n        id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n        message: 'Failed to select recipe: Recipe not found',\r\n        severity: AlarmSeverity.warning,\r\n        timestamp: DateTime.now(),\r\n      ));\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  // Emergency stop\r\n  void emergencyStop() {\r\n    stopSystem();\r\n    for (var component in _componentProvider.components.values) {\r\n      if (component.isActivated) {\r\n        _componentProvider.deactivateComponent(component.name);\r\n        _systemStateRepository.saveComponentState(\r\n            _authService.currentUser!.uid, component);\r\n      }\r\n    }\r\n    _alarmProvider.addAlarm(Alarm(\r\n      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n      message: 'Emergency stop activated',\r\n      severity: AlarmSeverity.critical,\r\n      timestamp: DateTime.now(),\r\n    ));\r\n    addLogEntry('Emergency stop activated', ComponentStatus.error);\r\n    notifyListeners();\r\n  }\r\n\r\n  // Check reactor pressure\r\n  bool isReactorPressureNormal() {\r\n    final pressure =\r\n        _componentProvider.getComponent('Reaction Chamber')?.currentValues['pressure'] ?? 0.0;\r\n    return pressure >= 0.9 && pressure <= 1.1;\r\n  }\r\n\r\n  // Check reactor temperature\r\n  bool isReactorTemperatureNormal() {\r\n    final temperature =\r\n        _componentProvider.getComponent('Reaction Chamber')?.currentValues['temperature'] ?? 0.0;\r\n    return temperature >= 145 && temperature <= 155;\r\n  }\r\n\r\n  // Check precursor temperature\r\n  bool isPrecursorTemperatureNormal(String precursor) {\r\n    final component = _componentProvider.getComponent(precursor);\r\n    if (component != null) {\r\n      final temperature = component.currentValues['temperature'] ?? 0.0;\r\n      return temperature >= 28 && temperature <= 32;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Increment recipe step index\r\n  void incrementRecipeStepIndex() {\r\n    if (_activeRecipe != null &&\r\n        _currentRecipeStepIndex < _activeRecipe!.steps.length - 1) {\r\n      _currentRecipeStepIndex++;\r\n      notifyListeners();\r\n    }\r\n  }\r\n\r\n  // Complete the recipe\r\n  void completeRecipe() {\r\n    addLogEntry(\r\n        'Recipe completed: ${_activeRecipe?.name}', ComponentStatus.normal);\r\n    _activeRecipe = null;\r\n    _currentRecipeStepIndex = 0;\r\n    _isSystemRunning = false;\r\n    _simulationService.stopSimulation();\r\n    notifyListeners();\r\n  }\r\n\r\n  // Trigger safety alert\r\n  void triggerSafetyAlert(SafetyError error) {\r\n    _alarmProvider.addAlarm(Alarm(\r\n      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n      message: error.description,\r\n      severity: _mapSeverityToAlarmSeverity(error.severity),\r\n      timestamp: DateTime.now(),\r\n    ));\r\n    addLogEntry('Safety Alert: ${error.description}',\r\n        _mapSeverityToComponentStatus(error.severity));\r\n  }\r\n\r\n  // Map safety severity to alarm severity\r\n  AlarmSeverity _mapSeverityToAlarmSeverity(SafetyErrorSeverity severity) {\r\n    switch (severity) {\r\n      case SafetyErrorSeverity.warning:\r\n        return AlarmSeverity.warning;\r\n      case SafetyErrorSeverity.critical:\r\n        return AlarmSeverity.critical;\r\n      default:\r\n        return AlarmSeverity.info;\r\n    }\r\n  }\r\n\r\n  // Map safety severity to component status\r\n  ComponentStatus _mapSeverityToComponentStatus(SafetyErrorSeverity severity) {\r\n    switch (severity) {\r\n      case SafetyErrorSeverity.warning:\r\n        return ComponentStatus.warning;\r\n      case SafetyErrorSeverity.critical:\r\n        return ComponentStatus.error;\r\n      default:\r\n        return ComponentStatus.normal;\r\n    }\r\n  }\r\n\r\n  // Get all recipes\r\n  List<Recipe> getAllRecipes() {\r\n    return _recipeProvider.recipes;\r\n  }\r\n\r\n  // Refresh recipes\r\n  void refreshRecipes() {\r\n    _recipeProvider.loadRecipes();\r\n    notifyListeners();\r\n  }\r\n\r\n  // Execute multiple steps\r\n  Future<void> _executeSteps(List<RecipeStep> steps,\r\n      {double? inheritedTemperature, double? inheritedPressure}) async {\r\n    for (var step in steps) {\r\n      if (!_isSystemRunning) break;\r\n      await _executeStep(step,\r\n          inheritedTemperature: inheritedTemperature,\r\n          inheritedPressure: inheritedPressure);\r\n      incrementRecipeStepIndex();\r\n    }\r\n  }\r\n\r\n  // Execute a single step\r\n  Future<void> _executeStep(RecipeStep step,\r\n      {double? inheritedTemperature, double? inheritedPressure}) async {\r\n    addLogEntry(\r\n        'Executing step: ${_getStepDescription(step)}', ComponentStatus.normal);\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        await _executeValveStep(step);\r\n        break;\r\n      case StepType.purge:\r\n        await _executePurgeStep(step);\r\n        break;\r\n      case StepType.loop:\r\n        await _executeLoopStep(step, inheritedTemperature, inheritedPressure);\r\n        break;\r\n      case StepType.setParameter:\r\n        await _executeSetParameterStep(step);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Deactivate all valves\r\n  void _deactivateAllValves() {\r\n    _componentProvider.components.keys\r\n        .where((name) => name.toLowerCase().contains('valve'))\r\n        .forEach((valveName) {\r\n      _componentProvider.deactivateComponent(valveName);\r\n      addLogEntry('$valveName deactivated', ComponentStatus.normal);\r\n    });\r\n  }\r\n\r\n  // Activate a component\r\n  void _activateComponent(String componentName) {\r\n    _componentProvider.activateComponent(componentName);\r\n    addLogEntry('$componentName activated', ComponentStatus.normal);\r\n  }\r\n\r\n  // Get step description\r\n  String _getStepDescription(RecipeStep step) {\r\n    switch (step.type) {\r\n      case StepType.valve:\r\n        return 'Open ${step.parameters['valveType']} for ${step.parameters['duration']} seconds';\r\n      case StepType.purge:\r\n        return 'Purge for ${step.parameters['duration']} seconds';\r\n      case StepType.loop:\r\n        return 'Loop ${step.parameters['iterations']} times';\r\n      case StepType.setParameter:\r\n        return 'Set ${step.parameters['parameter']} of ${step.parameters['component']} to ${step.parameters['value']}';\r\n      default:\r\n        return 'Unknown step type';\r\n    }\r\n  }\r\n\r\n  // Execute a valve step\r\n  Future<void> _executeValveStep(RecipeStep step) async {\r\n    ValveType valveType = step.parameters['valveType'] as ValveType;\r\n    int duration = step.parameters['duration'] as int;\r\n    String valveName = valveType == ValveType.valveA ? 'Valve 1' : 'Valve 2';\r\n\r\n    _componentProvider.addParameterDataPoint(\r\n        valveName,\r\n        'status',\r\n        DataPoint(timestamp: DateTime.now(), value: 1.0)\r\n    );\r\n    addLogEntry('$valveName opened for $duration seconds', ComponentStatus.normal);\r\n\r\n    await Future.delayed(Duration(seconds: duration));\r\n\r\n    _componentProvider.addParameterDataPoint(\r\n        valveName,\r\n        'status',\r\n        DataPoint(timestamp: DateTime.now(), value: 0.0)\r\n    );\r\n    addLogEntry('$valveName closed after $duration seconds', ComponentStatus.normal);\r\n  }\r\n\r\n  // Execute a purge step\r\n  Future<void> _executePurgeStep(RecipeStep step) async {\r\n    int duration = step.parameters['duration'] as int;\r\n\r\n    _componentProvider.updateComponentCurrentValues('Valve 1', {'status': 0.0});\r\n    _componentProvider.updateComponentCurrentValues('Valve 2', {'status': 0.0});\r\n    _componentProvider.updateComponentCurrentValues('MFC', {'flow_rate': 100.0}); // Assume max flow rate for purge\r\n    addLogEntry('Purge started for $duration seconds', ComponentStatus.normal);\r\n\r\n    await Future.delayed(Duration(seconds: duration));\r\n\r\n    _componentProvider.updateComponentCurrentValues('MFC', {'flow_rate': 0.0});\r\n    addLogEntry('Purge completed after $duration seconds', ComponentStatus.normal);\r\n  }\r\n\r\n  // Execute a loop step\r\n  Future<void> _executeLoopStep(RecipeStep step, double? parentTemperature,\r\n      double? parentPressure) async {\r\n    int iterations = step.parameters['iterations'] as int;\r\n    double? loopTemperature = step.parameters['temperature'] as double?;\r\n    double? loopPressure = step.parameters['pressure'] as double?;\r\n\r\n    double effectiveTemperature = loopTemperature ??\r\n        // inheritedTemperature ??\r\n        _componentProvider.getComponent('Reaction Chamber')!.currentValues['temperature']!;\r\n    double effectivePressure = loopPressure ??\r\n        // inheritedPressure ??\r\n        _componentProvider.getComponent('Reaction Chamber')!.currentValues['pressure']!;\r\n\r\n    for (int i = 0; i < iterations; i++) {\r\n      if (!_isSystemRunning) break;\r\n      addLogEntry('Starting loop iteration ${i + 1} of $iterations',\r\n          ComponentStatus.normal);\r\n\r\n      await _setReactionChamberParameters(\r\n          effectiveTemperature, effectivePressure);\r\n\r\n      await _executeSteps(step.subSteps ?? [],\r\n          inheritedTemperature: effectiveTemperature,\r\n          inheritedPressure: effectivePressure);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // Execute a set parameter step\r\n  Future<void> _executeSetParameterStep(RecipeStep step) async {\r\n    String componentName = step.parameters['component'] as String;\r\n    String parameterName = step.parameters['parameter'] as String;\r\n    double value = step.parameters['value'] as double;\r\n\r\n    if (_componentProvider.getComponent(componentName) != null) {\r\n      _componentProvider.updateComponentSetValues(\r\n          componentName, {parameterName: value});\r\n      addLogEntry('Set $parameterName of $componentName to $value',\r\n          ComponentStatus.normal);\r\n      await Future.delayed(const Duration(milliseconds: 500));\r\n    } else {\r\n      addAlarm('Unknown component: $componentName', AlarmSeverity.warning);\r\n    }\r\n  }\r\n\r\n  // Set reaction chamber parameters\r\n  Future<void> _setReactionChamberParameters(\r\n      double temperature, double pressure) async {\r\n    _componentProvider.updateComponentSetValues('Reaction Chamber', {\r\n      'temperature': temperature,\r\n      'pressure': pressure,\r\n    });\r\n    addLogEntry(\r\n        'Setting chamber temperature to $temperature°C and pressure to $pressure atm',\r\n        ComponentStatus.normal);\r\n\r\n    await Future.delayed(const Duration(seconds: 5));\r\n\r\n    _componentProvider.updateComponentCurrentValues('Reaction Chamber', {\r\n      'temperature': temperature,\r\n      'pressure': pressure,\r\n    });\r\n    addLogEntry('Chamber reached target temperature and pressure',\r\n        ComponentStatus.normal);\r\n  }\r\n\r\n  // Add an alarm\r\n  void addAlarm(String message, AlarmSeverity severity) async {\r\n    final newAlarm = Alarm(\r\n      id: DateTime.now().millisecondsSinceEpoch.toString(),\r\n      message: message,\r\n      severity: severity,\r\n      timestamp: DateTime.now(),\r\n    );\r\n\r\n    await _alarmProvider.addAlarm(newAlarm);\r\n\r\n    // Log the alarm creation\r\n    addLogEntry('New alarm: ${newAlarm.message}', ComponentStatus.warning);\r\n\r\n    notifyListeners();\r\n  }\r\n\r\n  // Acknowledge an alarm\r\n  void acknowledgeAlarm(String alarmId) async {\r\n    await _alarmProvider.acknowledgeAlarm(alarmId);\r\n\r\n    // Log the alarm acknowledgement\r\n    addLogEntry('Alarm acknowledged: $alarmId', ComponentStatus.normal);\r\n\r\n    notifyListeners();\r\n  }\r\n\r\n  // Clear an alarm\r\n  void clearAlarm(String alarmId) async {\r\n    await _alarmProvider.clearAlarm(alarmId);\r\n\r\n    // Log the alarm clearance\r\n    addLogEntry('Alarm cleared: $alarmId', ComponentStatus.normal);\r\n\r\n    notifyListeners();\r\n  }\r\n\r\n  // Clear all acknowledged alarms\r\n  void clearAllAcknowledgedAlarms() async {\r\n    await _alarmProvider.clearAllAcknowledgedAlarms();\r\n\r\n    // Log the action\r\n    addLogEntry('All acknowledged alarms cleared', ComponentStatus.normal);\r\n\r\n    notifyListeners();\r\n  }\r\n\r\n  // Dispose resources\r\n  @override\r\n  void dispose() {\r\n    _stopContinuousStateLogging();\r\n    _simulationService.stopSimulation();\r\n    super.dispose();\r\n  }\r\n\r\n  void updateComponentCurrentValues(String componentName, Map<String, double> newStates) {\r\n    _componentProvider.updateComponentCurrentValues(componentName, newStates);\r\n  }\r\n}\r\n"
        }
    ]
}