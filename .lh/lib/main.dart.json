{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1726318117097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726411660110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,50 @@\n-// lib/main.dart\r\n-\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n+import 'package:google_fonts/google_fonts.dart';\r\n+import 'package:animations/animations.dart';\r\n \r\n-// Import Providers from Maintenance Module\r\n+// Import Providers\r\n+import 'modules/system_operation_also_main_module/providers/experiment_planner_provider.dart';\r\n import 'modules/maintenance_module/providers/maintenance_experiment_planner_provider.dart';\r\n import 'modules/maintenance_module/providers/maintenance_provider.dart';\r\n import 'modules/maintenance_module/providers/calibration_provider.dart';\r\n import 'modules/maintenance_module/providers/spare_parts_provider.dart';\r\n import 'modules/maintenance_module/providers/report_provider.dart';\r\n-\r\n-// Import Providers from System Operation Module\r\n import 'modules/system_operation_also_main_module/models/recipe_state.dart';\r\n import 'modules/system_operation_also_main_module/providers/recipe_provider.dart';\r\n import 'modules/system_operation_also_main_module/providers/alarm_provider.dart';\r\n-import 'modules/system_operation_also_main_module/providers/operation_experiment_planner_provider.dart';\r\n-\r\n-// Import Providers from System Diagram View Module\r\n-import 'modules/system_diagram_view_module/providers/diagram_experiment_planner_provider.dart';\r\n-\r\n-// Import Services\r\n import 'services/navigation_service.dart';\r\n \r\n-// Import Screens from Maintenance Module\r\n+// Import Screens\r\n import 'modules/maintenance_module/screens/maintenance_home_screen.dart';\r\n import 'modules/maintenance_module/screens/calibration_screen.dart';\r\n import 'modules/maintenance_module/screens/troubleshooting_screen.dart';\r\n import 'modules/maintenance_module/screens/spare_parts_screen.dart';\r\n import 'modules/maintenance_module/screens/documentation_screen.dart';\r\n import 'modules/maintenance_module/screens/reporting_screen.dart';\r\n import 'modules/maintenance_module/screens/remote_assistance_screen.dart';\r\n import 'modules/maintenance_module/screens/safety_procedures_screen.dart';\r\n-\r\n-// Import Screens from System Diagram View Module\r\n-import 'modules/system_diagram_view_module/screens/system_overview_screen.dart';\r\n-// import 'modules/system_diagram_view_module/screens/diagram_details_screen.dart';\r\n-\r\n-// Import Screens from System Operation Module\r\n+import 'modules/system_operation_also_main_module/screens/system_overview_screen.dart';\r\n import 'modules/system_operation_also_main_module/screens/main_dashboard.dart';\r\n-import 'modules/system_operation_also_main_module/screens/recipe_management_screen.dart'; // Added import\r\n+import 'modules/system_operation_also_main_module/screens/recipe_management_screen.dart';\r\n \r\n-// Import Shared Widgets\r\n+// Import Enums and Widgets\r\n+import 'enums/navigation_item.dart';\r\n import 'widgets/app_drawer.dart';\r\n \r\n-// Import Enums\r\n-import 'enums/navigation_item.dart'; // Ensure this path is correct\r\n-\r\n void main() {\r\n-  runApp(MyApp());\r\n+  runApp(\r\n+    Provider<NavigationService>(\r\n+      create: (_) => NavigationService(),\r\n+      child: MyApp(),\r\n+    ),\r\n+  );\r\n }\r\n \r\n class MyApp extends StatelessWidget {\r\n   MyApp({Key? key}) : super(key: key);\r\n \r\n-  // Initialize ReportProvider with dependencies\r\n   ReportProvider _initReportProvider(BuildContext context) {\r\n     return ReportProvider(\r\n       Provider.of<MaintenanceProvider>(context, listen: false),\r\n       Provider.of<CalibrationProvider>(context, listen: false),\r\n@@ -69,114 +59,177 @@\n         ChangeNotifierProvider(create: (_) => MaintenanceProvider()),\r\n         ChangeNotifierProvider(create: (_) => CalibrationProvider()),\r\n         ChangeNotifierProvider(create: (_) => MaintenanceSystemStateProvider()),\r\n         ChangeNotifierProvider(create: (_) => SparePartsProvider()),\r\n-        ChangeNotifierProvider(create: (_) => SystemStateProvider()),\r\n \r\n-        // System Operation Module Providers\r\n-        ChangeNotifierProvider(create: (_) => RecipeProvider()),\r\n+        // AlarmProvider\r\n         ChangeNotifierProvider(create: (_) => AlarmProvider()),\r\n+\r\n+        // SystemStateProvider depends on AlarmProvider\r\n+        ChangeNotifierProxyProvider<AlarmProvider, SystemStateProvider>(\r\n+          create: (ctx) => SystemStateProvider(alarmProvider: ctx.read<AlarmProvider>()),\r\n+          update: (ctx, alarmProvider, previous) {\r\n+            if (previous == null) {\r\n+              return SystemStateProvider(alarmProvider: alarmProvider);\r\n+            } else {\r\n+              previous.updateAlarmProvider(alarmProvider);\r\n+              return previous;\r\n+            }\r\n+          },\r\n+        ),\r\n+\r\n+\r\n+        // AlarmProvider should be initialized first\r\n+        ChangeNotifierProvider<AlarmProvider>(\r\n+          create: (_) => AlarmProvider(),\r\n+        ),\r\n+\r\n+        // RecipeProvider depends on SystemStateProvider\r\n+        ChangeNotifierProxyProvider<SystemStateProvider, RecipeProvider>(\r\n+          create: (ctx) => RecipeProvider(systemStateProvider: ctx.read<SystemStateProvider>()),\r\n+          update: (ctx, systemStateProvider, previous) {\r\n+            if (previous == null) {\r\n+              return RecipeProvider(systemStateProvider: systemStateProvider);\r\n+            } else {\r\n+              previous.systemStateProvider = systemStateProvider;\r\n+              return previous;\r\n+            }\r\n+          },\r\n+        ),\r\n+        ChangeNotifierProvider(create: (_) => AlarmProvider()),\r\n         ChangeNotifierProvider(create: (_) => RecipeState()),\r\n \r\n-        // System Diagram View Module Providers\r\n-        ChangeNotifierProvider(create: (_) => SystemStateProvider()),\r\n \r\n-        // Shared Providers\r\n-        Provider(create: (_) => NavigationService()),\r\n-\r\n         // ReportProvider depends on MaintenanceProvider and CalibrationProvider\r\n         ChangeNotifierProxyProvider2<MaintenanceProvider, CalibrationProvider, ReportProvider>(\r\n           create: (ctx) => _initReportProvider(ctx),\r\n           update: (ctx, maintenance, calibration, previous) =>\r\n               ReportProvider(maintenance, calibration),\r\n         ),\r\n       ],\r\n-      child: Consumer<NavigationService>(\r\n-        builder: (context, navigationService, child) {\r\n-          return MaterialApp(\r\n-            title: 'ALD Machine Maintenance',\r\n-            navigatorKey: navigationService.navigatorKey, // Set navigator key\r\n-            theme: ThemeData.dark().copyWith(\r\n-              primaryColor: Colors.blueGrey[800],\r\n-              scaffoldBackgroundColor: Colors.grey[900],\r\n-              appBarTheme: AppBarTheme(\r\n-                backgroundColor: Colors.blueGrey[900],\r\n-                elevation: 0,\r\n-              ),\r\n-              cardTheme: CardTheme(\r\n-                color: Colors.blueGrey[800],\r\n-                elevation: 4,\r\n-                shape: RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(12),\r\n-                ),\r\n-              ),\r\n-              textTheme: TextTheme(\r\n-                titleLarge: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),\r\n-                bodyLarge: TextStyle(color: Colors.white70),\r\n-                bodyMedium: TextStyle(color: Colors.white60),\r\n-              ),\r\n-              buttonTheme: ButtonThemeData(\r\n-                buttonColor: Colors.blueAccent,\r\n-                textTheme: ButtonTextTheme.primary,\r\n-              ),\r\n-            ),\r\n-            home: MainScreen(), // Updated Main screen without tabs\r\n-            routes: {\r\n-              // Maintenance Module Routes\r\n-              '/maintenance': (ctx) => MaintenanceHomeScreen(),\r\n-              '/calibration': (ctx) => CalibrationScreen(),\r\n-              '/troubleshooting': (ctx) => TroubleshootingScreen(),\r\n-              '/spare_parts': (ctx) => SparePartsScreen(),\r\n-              '/documentation': (ctx) => DocumentationScreen(),\r\n-              '/reporting': (ctx) => ReportingScreen(),\r\n-              '/remote_assistance': (ctx) => RemoteAssistanceScreen(),\r\n-              '/safety_procedures': (ctx) => SafetyProceduresScreen(),\r\n-\r\n-              // System Diagram View Module Routes\r\n-              '/system_overview': (ctx) => SystemOverviewScreen(),\r\n-              // '/diagram_details': (ctx) => DiagramDetailsScreen(),\r\n-\r\n-              // System Operation Module Routes\r\n-              // '/main_dashboard': (ctx) => MainDashboard(), // Remove this\r\n-              '/recipe_management': (ctx) => RecipeManagementScreen(), // Keep if needed\r\n-              // '/operation_settings': (ctx) => OperationSettingsScreen(),\r\n-              // '/profile': (ctx) => ProfileScreen(),\r\n-              // '/settings': (ctx) => SettingsScreen(),\r\n-              // '/help_support': (ctx) => HelpSupportScreen(),\r\n-\r\n-              // Others Section Routes (Optional)\r\n-              // Add any additional routes here\r\n-            },\r\n-          );\r\n+      child: MaterialApp(\r\n+        title: 'Tesla ALD Machine Maintenance',\r\n+        navigatorKey: Provider.of<NavigationService>(context, listen: false).navigatorKey,\r\n+        debugShowCheckedModeBanner: false,\r\n+        theme: _getTeslaTheme(),\r\n+        home: MainScreen(),\r\n+        routes: {\r\n+          '/maintenance': (ctx) => MaintenanceHomeScreen(),\r\n+          '/calibration': (ctx) => CalibrationScreen(),\r\n+          '/troubleshooting': (ctx) => TroubleshootingScreen(),\r\n+          '/spare_parts': (ctx) => SparePartsScreen(),\r\n+          '/documentation': (ctx) => DocumentationScreen(),\r\n+          '/reporting': (ctx) => ReportingScreen(),\r\n+          '/remote_assistance': (ctx) => RemoteAssistanceScreen(),\r\n+          '/safety_procedures': (ctx) => SafetyProceduresScreen(),\r\n+          '/system_overview': (ctx) => SystemOverviewScreen(),\r\n+          '/recipe_management': (ctx) => RecipeManagementScreen(),\r\n         },\r\n       ),\r\n     );\r\n   }\r\n+\r\n+  ThemeData _getTeslaTheme() {\r\n+    return ThemeData(\r\n+      useMaterial3: true,\r\n+      brightness: Brightness.dark,\r\n+      colorScheme: ColorScheme.dark(\r\n+        primary: Color(0xFF2C2C2C),    // Dark Grey\r\n+        secondary: Color(0xFF4A4A4A),  // Light Grey\r\n+        background: Color(0xFF121212), // Very Dark Grey (Almost Black)\r\n+        surface: Color(0xFF1E1E1E),    // Dark Surface\r\n+        onBackground: Colors.white,\r\n+        onSurface: Colors.white,\r\n+      ),\r\n+      scaffoldBackgroundColor: Color(0xFF121212),\r\n+      fontFamily: GoogleFonts.roboto().fontFamily,\r\n+      textTheme: TextTheme(\r\n+        displayLarge: GoogleFonts.roboto(fontSize: 56, fontWeight: FontWeight.w300, letterSpacing: -1.5),\r\n+        displayMedium: GoogleFonts.roboto(fontSize: 45, fontWeight: FontWeight.w300, letterSpacing: -0.5),\r\n+        displaySmall: GoogleFonts.roboto(fontSize: 36, fontWeight: FontWeight.w400),\r\n+        headlineMedium: GoogleFonts.roboto(fontSize: 28, fontWeight: FontWeight.w400, letterSpacing: 0.25),\r\n+        headlineSmall: GoogleFonts.roboto(fontSize: 24, fontWeight: FontWeight.w400),\r\n+        titleLarge: GoogleFonts.roboto(fontSize: 20, fontWeight: FontWeight.w500, letterSpacing: 0.15),\r\n+        titleMedium: GoogleFonts.roboto(fontSize: 16, fontWeight: FontWeight.w400, letterSpacing: 0.15),\r\n+        titleSmall: GoogleFonts.roboto(fontSize: 14, fontWeight: FontWeight.w500, letterSpacing: 0.1),\r\n+        bodyLarge: GoogleFonts.roboto(fontSize: 16, fontWeight: FontWeight.w400, letterSpacing: 0.5),\r\n+        bodyMedium: GoogleFonts.roboto(fontSize: 14, fontWeight: FontWeight.w400, letterSpacing: 0.25),\r\n+        labelLarge: GoogleFonts.roboto(fontSize: 14, fontWeight: FontWeight.w500, letterSpacing: 1.25),\r\n+        bodySmall: GoogleFonts.roboto(fontSize: 12, fontWeight: FontWeight.w400, letterSpacing: 0.4),\r\n+        labelSmall: GoogleFonts.roboto(fontSize: 10, fontWeight: FontWeight.w400, letterSpacing: 1.5),\r\n+      ).apply(\r\n+        bodyColor: Colors.white,\r\n+        displayColor: Colors.white,\r\n+      ),\r\n+      appBarTheme: AppBarTheme(\r\n+        backgroundColor: Colors.transparent,\r\n+        elevation: 0,\r\n+        centerTitle: true,\r\n+        titleTextStyle: GoogleFonts.roboto(\r\n+          color: Colors.white,\r\n+          fontSize: 20,\r\n+          fontWeight: FontWeight.w500,\r\n+          letterSpacing: 0.15,\r\n+        ),\r\n+        iconTheme: IconThemeData(color: Colors.white),\r\n+      ),\r\n+      cardTheme: CardTheme(\r\n+        color: Color(0xFF1E1E1E),\r\n+        elevation: 0,\r\n+        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\r\n+      ),\r\n+      elevatedButtonTheme: ElevatedButtonThemeData(\r\n+        style: ElevatedButton.styleFrom(\r\n+          foregroundColor: Colors.white,\r\n+          backgroundColor: Color(0xFF2C2C2C),\r\n+          textStyle: GoogleFonts.roboto(fontSize: 14, fontWeight: FontWeight.w500, letterSpacing: 1.25),\r\n+          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),\r\n+          padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),\r\n+        ),\r\n+      ),\r\n+      drawerTheme: DrawerThemeData(\r\n+        backgroundColor: Color(0xFF1E1E1E),\r\n+        shape: RoundedRectangleBorder(borderRadius: BorderRadius.horizontal(right: Radius.circular(0))),\r\n+      ),\r\n+      iconTheme: IconThemeData(color: Colors.white, size: 24),\r\n+      inputDecorationTheme: InputDecorationTheme(\r\n+        filled: true,\r\n+        fillColor: Color(0xFF2C2C2C),\r\n+        border: OutlineInputBorder(\r\n+          borderRadius: BorderRadius.circular(8),\r\n+          borderSide: BorderSide.none,\r\n+        ),\r\n+        hintStyle: TextStyle(color: Colors.white70),\r\n+      ),\r\n+      dividerTheme: DividerThemeData(\r\n+        color: Color(0xFF2C2C2C),\r\n+        thickness: 1,\r\n+      ),\r\n+    );\r\n+  }\r\n }\r\n \r\n-// **Updated Main Screen to Centralize Navigation**\r\n class MainScreen extends StatefulWidget {\r\n   @override\r\n   _MainScreenState createState() => _MainScreenState();\r\n }\r\n \r\n class _MainScreenState extends State<MainScreen> {\r\n   NavigationItem _selectedItem = NavigationItem.mainDashboard;\r\n \r\n-  // Function to update the selected navigation item\r\n   void _selectNavigationItem(NavigationItem item) {\r\n     setState(() {\r\n       _selectedItem = item;\r\n     });\r\n-    Navigator.of(context).pop(); // Close the drawer\r\n+    if (MediaQuery.of(context).size.width <= 800) {\r\n+      Navigator.of(context).pop();\r\n+    }\r\n   }\r\n \r\n-  // Function to get the corresponding widget based on the selected item\r\n-\r\n   Widget _getSelectedScreen() {\r\n     switch (_selectedItem) {\r\n       case NavigationItem.mainDashboard:\r\n-        return MainDashboard(); // Handles its own TabController\r\n+        return MainDashboard();\r\n       case NavigationItem.recipeManagement:\r\n         return RecipeManagementScreen();\r\n       case NavigationItem.calibration:\r\n         return CalibrationScreen();\r\n@@ -192,25 +245,89 @@\n         return RemoteAssistanceScreen();\r\n       case NavigationItem.safetyProcedures:\r\n         return SafetyProceduresScreen();\r\n       case NavigationItem.overview:\r\n-        return MaintenanceHomeScreen(); // Assuming 'Overview' maps to MaintenanceHomeScreen\r\n+        return MaintenanceHomeScreen();\r\n       default:\r\n         return MainDashboard();\r\n     }\r\n   }\r\n \r\n+  BottomNavigationBarItem _buildBottomNavItem(IconData icon, String label) {\r\n+    return BottomNavigationBarItem(\r\n+      icon: Icon(icon),\r\n+      label: label,\r\n+    );\r\n+  }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text('ALD Machine Maintenance'),\r\n-      ),\r\n-      drawer: AppDrawer(\r\n-        onSelectItem: _selectNavigationItem, // Pass the callback\r\n-        selectedItem: _selectedItem, // Pass the current selected item\r\n-      ),\r\n-      body: _getSelectedScreen(),\r\n-    );\r\n+    final isLargeScreen = MediaQuery.of(context).size.width > 800;\r\n+    return LayoutBuilder(builder: (context, constraints) {\r\n+      if (isLargeScreen) {\r\n+        return Row(\r\n+          children: [\r\n+            Container(\r\n+              width: 240,\r\n+              color: Theme.of(context).drawerTheme.backgroundColor,\r\n+              child: AppDrawer(\r\n+                onSelectItem: _selectNavigationItem,\r\n+                selectedItem: _selectedItem,\r\n+              ),\r\n+            ),\r\n+            Expanded(\r\n+              child: PageTransitionSwitcher(\r\n+                duration: Duration(milliseconds: 300),\r\n+                transitionBuilder: (child, animation, secondaryAnimation) =>\r\n+                    FadeThroughTransition(\r\n+                      animation: animation,\r\n+                      secondaryAnimation: secondaryAnimation,\r\n+                      child: child,\r\n+                    ),\r\n+                child: _getSelectedScreen(),\r\n+              ),\r\n+            ),\r\n+          ],\r\n+        );\r\n+      } else {\r\n+        return Scaffold(\r\n+          extendBodyBehindAppBar: true,\r\n+          appBar: AppBar(\r\n+            title: Text('Tesla ALD Maintenance'),\r\n+            actions: [\r\n+              IconButton(\r\n+                icon: Icon(Icons.search),\r\n+                onPressed: () {\r\n+                  // Implement search functionality\r\n+                },\r\n+              ),\r\n+              IconButton(\r\n+                icon: Icon(Icons.notifications),\r\n+                onPressed: () {\r\n+                  // Implement notifications functionality\r\n+                },\r\n+              ),\r\n+            ],\r\n+          ),\r\n+          drawer: Container(\r\n+            width: 240,\r\n+            child: AppDrawer(\r\n+              onSelectItem: _selectNavigationItem,\r\n+              selectedItem: _selectedItem,\r\n+            ),\r\n+          ),\r\n+          body: PageTransitionSwitcher(\r\n+            duration: Duration(milliseconds: 300),\r\n+            transitionBuilder: (child, animation, secondaryAnimation) =>\r\n+                FadeThroughTransition(\r\n+                  animation: animation,\r\n+                  secondaryAnimation: secondaryAnimation,\r\n+                  child: child,\r\n+                ),\r\n+            child: _getSelectedScreen(),\r\n+          ),\r\n+\r\n+        );\r\n+      }\r\n+    });\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1726318117097,
            "name": "Commit-0",
            "content": "// lib/main.dart\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\n\r\n// Import Providers from Maintenance Module\r\nimport 'modules/maintenance_module/providers/maintenance_experiment_planner_provider.dart';\r\nimport 'modules/maintenance_module/providers/maintenance_provider.dart';\r\nimport 'modules/maintenance_module/providers/calibration_provider.dart';\r\nimport 'modules/maintenance_module/providers/spare_parts_provider.dart';\r\nimport 'modules/maintenance_module/providers/report_provider.dart';\r\n\r\n// Import Providers from System Operation Module\r\nimport 'modules/system_operation_also_main_module/models/recipe_state.dart';\r\nimport 'modules/system_operation_also_main_module/providers/recipe_provider.dart';\r\nimport 'modules/system_operation_also_main_module/providers/alarm_provider.dart';\r\nimport 'modules/system_operation_also_main_module/providers/operation_experiment_planner_provider.dart';\r\n\r\n// Import Providers from System Diagram View Module\r\nimport 'modules/system_diagram_view_module/providers/diagram_experiment_planner_provider.dart';\r\n\r\n// Import Services\r\nimport 'services/navigation_service.dart';\r\n\r\n// Import Screens from Maintenance Module\r\nimport 'modules/maintenance_module/screens/maintenance_home_screen.dart';\r\nimport 'modules/maintenance_module/screens/calibration_screen.dart';\r\nimport 'modules/maintenance_module/screens/troubleshooting_screen.dart';\r\nimport 'modules/maintenance_module/screens/spare_parts_screen.dart';\r\nimport 'modules/maintenance_module/screens/documentation_screen.dart';\r\nimport 'modules/maintenance_module/screens/reporting_screen.dart';\r\nimport 'modules/maintenance_module/screens/remote_assistance_screen.dart';\r\nimport 'modules/maintenance_module/screens/safety_procedures_screen.dart';\r\n\r\n// Import Screens from System Diagram View Module\r\nimport 'modules/system_diagram_view_module/screens/system_overview_screen.dart';\r\n// import 'modules/system_diagram_view_module/screens/diagram_details_screen.dart';\r\n\r\n// Import Screens from System Operation Module\r\nimport 'modules/system_operation_also_main_module/screens/main_dashboard.dart';\r\nimport 'modules/system_operation_also_main_module/screens/recipe_management_screen.dart'; // Added import\r\n\r\n// Import Shared Widgets\r\nimport 'widgets/app_drawer.dart';\r\n\r\n// Import Enums\r\nimport 'enums/navigation_item.dart'; // Ensure this path is correct\r\n\r\nvoid main() {\r\n  runApp(MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  MyApp({Key? key}) : super(key: key);\r\n\r\n  // Initialize ReportProvider with dependencies\r\n  ReportProvider _initReportProvider(BuildContext context) {\r\n    return ReportProvider(\r\n      Provider.of<MaintenanceProvider>(context, listen: false),\r\n      Provider.of<CalibrationProvider>(context, listen: false),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MultiProvider(\r\n      providers: [\r\n        // Maintenance Module Providers\r\n        ChangeNotifierProvider(create: (_) => MaintenanceProvider()),\r\n        ChangeNotifierProvider(create: (_) => CalibrationProvider()),\r\n        ChangeNotifierProvider(create: (_) => MaintenanceSystemStateProvider()),\r\n        ChangeNotifierProvider(create: (_) => SparePartsProvider()),\r\n        ChangeNotifierProvider(create: (_) => SystemStateProvider()),\r\n\r\n        // System Operation Module Providers\r\n        ChangeNotifierProvider(create: (_) => RecipeProvider()),\r\n        ChangeNotifierProvider(create: (_) => AlarmProvider()),\r\n        ChangeNotifierProvider(create: (_) => RecipeState()),\r\n\r\n        // System Diagram View Module Providers\r\n        ChangeNotifierProvider(create: (_) => SystemStateProvider()),\r\n\r\n        // Shared Providers\r\n        Provider(create: (_) => NavigationService()),\r\n\r\n        // ReportProvider depends on MaintenanceProvider and CalibrationProvider\r\n        ChangeNotifierProxyProvider2<MaintenanceProvider, CalibrationProvider, ReportProvider>(\r\n          create: (ctx) => _initReportProvider(ctx),\r\n          update: (ctx, maintenance, calibration, previous) =>\r\n              ReportProvider(maintenance, calibration),\r\n        ),\r\n      ],\r\n      child: Consumer<NavigationService>(\r\n        builder: (context, navigationService, child) {\r\n          return MaterialApp(\r\n            title: 'ALD Machine Maintenance',\r\n            navigatorKey: navigationService.navigatorKey, // Set navigator key\r\n            theme: ThemeData.dark().copyWith(\r\n              primaryColor: Colors.blueGrey[800],\r\n              scaffoldBackgroundColor: Colors.grey[900],\r\n              appBarTheme: AppBarTheme(\r\n                backgroundColor: Colors.blueGrey[900],\r\n                elevation: 0,\r\n              ),\r\n              cardTheme: CardTheme(\r\n                color: Colors.blueGrey[800],\r\n                elevation: 4,\r\n                shape: RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.circular(12),\r\n                ),\r\n              ),\r\n              textTheme: TextTheme(\r\n                titleLarge: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),\r\n                bodyLarge: TextStyle(color: Colors.white70),\r\n                bodyMedium: TextStyle(color: Colors.white60),\r\n              ),\r\n              buttonTheme: ButtonThemeData(\r\n                buttonColor: Colors.blueAccent,\r\n                textTheme: ButtonTextTheme.primary,\r\n              ),\r\n            ),\r\n            home: MainScreen(), // Updated Main screen without tabs\r\n            routes: {\r\n              // Maintenance Module Routes\r\n              '/maintenance': (ctx) => MaintenanceHomeScreen(),\r\n              '/calibration': (ctx) => CalibrationScreen(),\r\n              '/troubleshooting': (ctx) => TroubleshootingScreen(),\r\n              '/spare_parts': (ctx) => SparePartsScreen(),\r\n              '/documentation': (ctx) => DocumentationScreen(),\r\n              '/reporting': (ctx) => ReportingScreen(),\r\n              '/remote_assistance': (ctx) => RemoteAssistanceScreen(),\r\n              '/safety_procedures': (ctx) => SafetyProceduresScreen(),\r\n\r\n              // System Diagram View Module Routes\r\n              '/system_overview': (ctx) => SystemOverviewScreen(),\r\n              // '/diagram_details': (ctx) => DiagramDetailsScreen(),\r\n\r\n              // System Operation Module Routes\r\n              // '/main_dashboard': (ctx) => MainDashboard(), // Remove this\r\n              '/recipe_management': (ctx) => RecipeManagementScreen(), // Keep if needed\r\n              // '/operation_settings': (ctx) => OperationSettingsScreen(),\r\n              // '/profile': (ctx) => ProfileScreen(),\r\n              // '/settings': (ctx) => SettingsScreen(),\r\n              // '/help_support': (ctx) => HelpSupportScreen(),\r\n\r\n              // Others Section Routes (Optional)\r\n              // Add any additional routes here\r\n            },\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n// **Updated Main Screen to Centralize Navigation**\r\nclass MainScreen extends StatefulWidget {\r\n  @override\r\n  _MainScreenState createState() => _MainScreenState();\r\n}\r\n\r\nclass _MainScreenState extends State<MainScreen> {\r\n  NavigationItem _selectedItem = NavigationItem.mainDashboard;\r\n\r\n  // Function to update the selected navigation item\r\n  void _selectNavigationItem(NavigationItem item) {\r\n    setState(() {\r\n      _selectedItem = item;\r\n    });\r\n    Navigator.of(context).pop(); // Close the drawer\r\n  }\r\n\r\n  // Function to get the corresponding widget based on the selected item\r\n\r\n  Widget _getSelectedScreen() {\r\n    switch (_selectedItem) {\r\n      case NavigationItem.mainDashboard:\r\n        return MainDashboard(); // Handles its own TabController\r\n      case NavigationItem.recipeManagement:\r\n        return RecipeManagementScreen();\r\n      case NavigationItem.calibration:\r\n        return CalibrationScreen();\r\n      case NavigationItem.reporting:\r\n        return ReportingScreen();\r\n      case NavigationItem.troubleshooting:\r\n        return TroubleshootingScreen();\r\n      case NavigationItem.spareParts:\r\n        return SparePartsScreen();\r\n      case NavigationItem.documentation:\r\n        return DocumentationScreen();\r\n      case NavigationItem.remoteAssistance:\r\n        return RemoteAssistanceScreen();\r\n      case NavigationItem.safetyProcedures:\r\n        return SafetyProceduresScreen();\r\n      case NavigationItem.overview:\r\n        return MaintenanceHomeScreen(); // Assuming 'Overview' maps to MaintenanceHomeScreen\r\n      default:\r\n        return MainDashboard();\r\n    }\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('ALD Machine Maintenance'),\r\n      ),\r\n      drawer: AppDrawer(\r\n        onSelectItem: _selectNavigationItem, // Pass the callback\r\n        selectedItem: _selectedItem, // Pass the current selected item\r\n      ),\r\n      body: _getSelectedScreen(),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}